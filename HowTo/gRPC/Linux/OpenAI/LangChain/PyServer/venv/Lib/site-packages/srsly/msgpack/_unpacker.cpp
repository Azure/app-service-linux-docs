/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "__LITTLE_ENDIAN__",
                "1"
            ]
        ],
        "depends": [
            "C:\\hostedtoolcache\\windows\\Python\\3.11.4\\x64\\include\\Python.h",
            "C:\\hostedtoolcache\\windows\\Python\\3.11.4\\x64\\include\\pythread.h",
            "srsly\\msgpack\\unpack.h"
        ],
        "include_dirs": [
            "srsly/msgpack",
            "C:\\hostedtoolcache\\windows\\Python\\3.11.4\\x64\\include",
            "."
        ],
        "language": "c++",
        "name": "srsly.msgpack._unpacker",
        "sources": [
            "srsly/msgpack/_unpacker.pyx"
        ]
    },
    "module_name": "srsly.msgpack._unpacker"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__srsly__msgpack___unpacker
#define __PYX_HAVE_API__srsly__msgpack___unpacker
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include <stdlib.h>
#include <limits.h>
#include "unpack.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "srsly\\msgpack\\_unpacker.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};

/* "srsly/msgpack/_unpacker.pyx":13
 * from libc.string cimport *
 * from libc.limits cimport *
 * ctypedef unsigned long long uint64_t             # <<<<<<<<<<<<<<
 * 
 * from .exceptions import (
 */
typedef unsigned PY_LONG_LONG __pyx_t_5srsly_7msgpack_9_unpacker_uint64_t;

/*--- Type declarations ---*/
struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker;
struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack;

/* "srsly/msgpack/_unpacker.pyx":450
 *             self.file_like = None
 * 
 *     cdef object _unpack(self, execute_fn execute, bint iter=0):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         cdef object obj
 */
struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack {
  int __pyx_n;
  int iter;
};

/* "srsly/msgpack/_unpacker.pyx":216
 * 
 * 
 * cdef class Unpacker(object):             # <<<<<<<<<<<<<<
 *     """Streaming unpacker.
 * 
 */
struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker {
  PyObject_HEAD
  struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_vtab;
  unpack_context ctx;
  char *buf;
  Py_ssize_t buf_size;
  Py_ssize_t buf_head;
  Py_ssize_t buf_tail;
  PyObject *file_like;
  PyObject *file_like_read;
  Py_ssize_t read_size;
  PyObject *object_hook;
  PyObject *object_pairs_hook;
  PyObject *list_hook;
  PyObject *ext_hook;
  PyObject *encoding;
  PyObject *unicode_errors;
  Py_ssize_t max_buffer_size;
  __pyx_t_5srsly_7msgpack_9_unpacker_uint64_t stream_offset;
};



struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker {
  PyObject *(*append_buffer)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *, void *, Py_ssize_t);
  PyObject *(*read_from_file)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *);
  PyObject *(*_unpack)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *, execute_fn, struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack *__pyx_optional_args);
};
static struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_vtabptr_5srsly_7msgpack_9_unpacker_Unpacker;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* ReRaiseException.proto */
static CYTHON_INLINE void __Pyx_ReraiseException(void);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_36
#define __PYX_HAVE_RT_ImportType_proto_0_29_36
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_36 {
   __Pyx_ImportType_CheckSize_Error_0_29_36 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_36 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_36 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_append_buffer(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, void *__pyx_v__buf, Py_ssize_t __pyx_v__buf_len); /* proto*/
static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_read_from_file(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker__unpack(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, execute_fn __pyx_v_execute, struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack *__pyx_optional_args); /* proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.limits' */

/* Module declarations from 'srsly.msgpack._unpacker' */
static PyTypeObject *__pyx_ptype_5srsly_7msgpack_9_unpacker_Unpacker = 0;
static Py_ssize_t __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;
static CYTHON_INLINE PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_init_ctx(unpack_context *, PyObject *, PyObject *, PyObject *, PyObject *, int, int, int, char const *, char const *, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t, Py_ssize_t); /*proto*/
static CYTHON_INLINE int __pyx_f_5srsly_7msgpack_9_unpacker_get_data_from_buffer(PyObject *, Py_buffer *, char **, Py_ssize_t *, int *); /*proto*/
#define __Pyx_MODULE_NAME "srsly.msgpack._unpacker"
extern int __pyx_module_is_main_srsly__msgpack___unpacker;
int __pyx_module_is_main_srsly__msgpack___unpacker = 0;

/* Implementation of 'srsly.msgpack._unpacker' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_BufferError;
static PyObject *__pyx_builtin_RuntimeWarning;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_StopIteration;
static const char __pyx_k_buf[] = "buf";
static const char __pyx_k_ctx[] = "ctx";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_off[] = "off";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_cenc[] = "cenc";
static const char __pyx_k_cerr[] = "cerr";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_util[] = "util";
static const char __pyx_k_view[] = "view";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_packed[] = "packed";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_stream[] = "stream";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_ExtType[] = "ExtType";
static const char __pyx_k_buf_len[] = "buf_len";
static const char __pyx_k_unpackb[] = "unpackb";
static const char __pyx_k_Unpacker[] = "Unpacker";
static const char __pyx_k_encoding[] = "encoding";
static const char __pyx_k_ext_hook[] = "ext_hook";
static const char __pyx_k_ext_type[] = "_ext_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_typecode[] = "typecode";
static const char __pyx_k_use_list[] = "use_list";
static const char __pyx_k_ExtraData[] = "ExtraData";
static const char __pyx_k_OutOfData[] = "OutOfData";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_file_like[] = "file_like";
static const char __pyx_k_list_hook[] = "list_hook";
static const char __pyx_k_read_size[] = "read_size";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_BufferFull[] = "BufferFull";
static const char __pyx_k_StackError[] = "StackError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_exceptions[] = "exceptions";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_BufferError[] = "BufferError";
static const char __pyx_k_FormatError[] = "FormatError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_max_bin_len[] = "max_bin_len";
static const char __pyx_k_max_ext_len[] = "max_ext_len";
static const char __pyx_k_max_map_len[] = "max_map_len";
static const char __pyx_k_max_str_len[] = "max_str_len";
static const char __pyx_k_object_hook[] = "object_hook";
static const char __pyx_k_ensure_bytes[] = "ensure_bytes";
static const char __pyx_k_new_protocol[] = "new_protocol";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_max_array_len[] = "max_array_len";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_RuntimeWarning[] = "RuntimeWarning";
static const char __pyx_k_strict_map_key[] = "strict_map_key";
static const char __pyx_k_unicode_errors[] = "unicode_errors";
static const char __pyx_k_max_buffer_size[] = "max_buffer_size";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_object_pairs_hook[] = "object_pairs_hook";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Unpack_failed_error_d[] = "Unpack failed: error = %d";
static const char __pyx_k_No_more_data_to_unpack[] = "No more data to unpack.";
static const char __pyx_k_srsly_msgpack__unpacker[] = "srsly.msgpack._unpacker";
static const char __pyx_k_could_not_get_memoryview[] = "could not get memoryview";
static const char __pyx_k_default_read_extended_type[] = "default_read_extended_type";
static const char __pyx_k_ext_hook_must_be_a_callable[] = "ext_hook must be a callable.";
static const char __pyx_k_srsly_msgpack__unpacker_pyx[] = "srsly\\msgpack\\_unpacker.pyx";
static const char __pyx_k_list_hook_must_be_a_callable[] = "list_hook must be a callable.";
static const char __pyx_k_Unpack_failed_incomplete_input[] = "Unpack failed: incomplete input";
static const char __pyx_k_object_hook_must_be_a_callable[] = "object_hook must be a callable.";
static const char __pyx_k_file_like_read_must_be_a_callab[] = "`file_like.read` must be a callable.";
static const char __pyx_k_unpacker_feed_is_not_be_able_to[] = "unpacker.feed() is not be able to use with `file_like`.";
static const char __pyx_k_Cannot_decode_extended_type_with[] = "Cannot decode extended type with typecode=%d";
static const char __pyx_k_Unable_to_allocate_internal_buff[] = "Unable to allocate internal buffer.";
static const char __pyx_k_Unable_to_enlarge_internal_buffe[] = "Unable to enlarge internal buffer.";
static const char __pyx_k_cannot_unpack_from_multi_byte_ob[] = "cannot unpack from multi-byte object";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_object_pairs_hook_and_object_hoo[] = "object_pairs_hook and object_hook are mutually exclusive.";
static const char __pyx_k_object_pairs_hook_must_be_a_call[] = "object_pairs_hook must be a callable.";
static const char __pyx_k_read_size_should_be_less_or_equa[] = "read_size should be less or equal to max_buffer_size";
static const char __pyx_k_using_old_buffer_interface_to_un[] = "using old buffer interface to unpack %s; this leads to unpacking errors if slicing is used and will be removed in a future version";
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_BufferError;
static PyObject *__pyx_n_s_BufferFull;
static PyObject *__pyx_kp_s_Cannot_decode_extended_type_with;
static PyObject *__pyx_n_s_ExtType;
static PyObject *__pyx_n_s_ExtraData;
static PyObject *__pyx_n_s_FormatError;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_No_more_data_to_unpack;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OutOfData;
static PyObject *__pyx_n_s_RuntimeWarning;
static PyObject *__pyx_n_s_StackError;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_allocate_internal_buff;
static PyObject *__pyx_kp_s_Unable_to_enlarge_internal_buffe;
static PyObject *__pyx_kp_s_Unpack_failed_error_d;
static PyObject *__pyx_kp_s_Unpack_failed_incomplete_input;
static PyObject *__pyx_n_s_Unpacker;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_buf;
static PyObject *__pyx_n_s_buf_len;
static PyObject *__pyx_kp_s_cannot_unpack_from_multi_byte_ob;
static PyObject *__pyx_n_s_cenc;
static PyObject *__pyx_n_s_cerr;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_s_could_not_get_memoryview;
static PyObject *__pyx_n_s_ctx;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_default_read_extended_type;
static PyObject *__pyx_n_s_encoding;
static PyObject *__pyx_n_s_ensure_bytes;
static PyObject *__pyx_n_s_exceptions;
static PyObject *__pyx_n_s_ext_hook;
static PyObject *__pyx_kp_s_ext_hook_must_be_a_callable;
static PyObject *__pyx_n_s_ext_type;
static PyObject *__pyx_n_s_file_like;
static PyObject *__pyx_kp_s_file_like_read_must_be_a_callab;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_list_hook;
static PyObject *__pyx_kp_s_list_hook_must_be_a_callable;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_array_len;
static PyObject *__pyx_n_s_max_bin_len;
static PyObject *__pyx_n_s_max_buffer_size;
static PyObject *__pyx_n_s_max_ext_len;
static PyObject *__pyx_n_s_max_map_len;
static PyObject *__pyx_n_s_max_str_len;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new_protocol;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_object_hook;
static PyObject *__pyx_kp_s_object_hook_must_be_a_callable;
static PyObject *__pyx_n_s_object_pairs_hook;
static PyObject *__pyx_kp_s_object_pairs_hook_and_object_hoo;
static PyObject *__pyx_kp_s_object_pairs_hook_must_be_a_call;
static PyObject *__pyx_n_s_off;
static PyObject *__pyx_n_s_packed;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_raw;
static PyObject *__pyx_n_s_read;
static PyObject *__pyx_n_s_read_size;
static PyObject *__pyx_kp_s_read_size_should_be_less_or_equa;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_srsly_msgpack__unpacker;
static PyObject *__pyx_kp_s_srsly_msgpack__unpacker_pyx;
static PyObject *__pyx_n_s_stream;
static PyObject *__pyx_n_s_strict_map_key;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_typecode;
static PyObject *__pyx_n_s_unicode_errors;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_unpackb;
static PyObject *__pyx_kp_s_unpacker_feed_is_not_be_able_to;
static PyObject *__pyx_n_s_use_list;
static PyObject *__pyx_kp_s_using_old_buffer_interface_to_un;
static PyObject *__pyx_n_s_util;
static PyObject *__pyx_n_s_view;
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_default_read_extended_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_typecode, CYTHON_UNUSED PyObject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_2unpackb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_packed, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_list_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_strict_map_key, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_4unpack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_stream, PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker___cinit__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static void __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_2__dealloc__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static int __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_4__init__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, PyObject *__pyx_v_file_like, Py_ssize_t __pyx_v_read_size, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_strict_map_key, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_list_hook, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, Py_ssize_t __pyx_v_max_buffer_size, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_6feed(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, PyObject *__pyx_v_next_bytes); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_8read_bytes(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, Py_ssize_t __pyx_v_nbytes); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_10unpack(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_12skip(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_14read_array_header(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_16read_map_header(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_18tell(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_20__iter__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_22__next__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_5srsly_7msgpack_9_unpacker_Unpacker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_k__8;
static Py_ssize_t __pyx_k__9;
static Py_ssize_t __pyx_k__10;
static Py_ssize_t __pyx_k__11;
static Py_ssize_t __pyx_k__12;
static Py_ssize_t __pyx_k__13;
static PyObject *__pyx_k__15;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
/* Late includes */

/* "srsly/msgpack/_unpacker.pyx":58
 *     void unpack_clear(unpack_context* ctx)
 * 
 * cdef inline init_ctx(unpack_context *ctx,             # <<<<<<<<<<<<<<
 *                      object object_hook, object object_pairs_hook,
 *                      object list_hook, object ext_hook,
 */

static CYTHON_INLINE PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_init_ctx(unpack_context *__pyx_v_ctx, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_list_hook, PyObject *__pyx_v_ext_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_strict_map_key, char const *__pyx_v_encoding, char const *__pyx_v_unicode_errors, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_ctx", 0);

  /* "srsly/msgpack/_unpacker.pyx":66
 *                      Py_ssize_t max_array_len, Py_ssize_t max_map_len,
 *                      Py_ssize_t max_ext_len):
 *     unpack_init(ctx)             # <<<<<<<<<<<<<<
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw
 */
  unpack_init(__pyx_v_ctx);

  /* "srsly/msgpack/_unpacker.pyx":67
 *                      Py_ssize_t max_ext_len):
 *     unpack_init(ctx)
 *     ctx.user.use_list = use_list             # <<<<<<<<<<<<<<
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key
 */
  __pyx_v_ctx->user.use_list = __pyx_v_use_list;

  /* "srsly/msgpack/_unpacker.pyx":68
 *     unpack_init(ctx)
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw             # <<<<<<<<<<<<<<
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 */
  __pyx_v_ctx->user.raw = __pyx_v_raw;

  /* "srsly/msgpack/_unpacker.pyx":69
 *     ctx.user.use_list = use_list
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key             # <<<<<<<<<<<<<<
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len
 */
  __pyx_v_ctx->user.strict_map_key = __pyx_v_strict_map_key;

  /* "srsly/msgpack/_unpacker.pyx":70
 *     ctx.user.raw = raw
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL             # <<<<<<<<<<<<<<
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len
 */
  __pyx_v_ctx->user.object_hook = ((PyObject *)NULL);
  __pyx_v_ctx->user.list_hook = ((PyObject *)NULL);

  /* "srsly/msgpack/_unpacker.pyx":71
 *     ctx.user.strict_map_key = strict_map_key
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len
 */
  __pyx_v_ctx->user.max_str_len = __pyx_v_max_str_len;

  /* "srsly/msgpack/_unpacker.pyx":72
 *     ctx.user.object_hook = ctx.user.list_hook = <PyObject*>NULL
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len
 */
  __pyx_v_ctx->user.max_bin_len = __pyx_v_max_bin_len;

  /* "srsly/msgpack/_unpacker.pyx":73
 *     ctx.user.max_str_len = max_str_len
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_map_len = max_map_len
 *     ctx.user.max_ext_len = max_ext_len
 */
  __pyx_v_ctx->user.max_array_len = __pyx_v_max_array_len;

  /* "srsly/msgpack/_unpacker.pyx":74
 *     ctx.user.max_bin_len = max_bin_len
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len             # <<<<<<<<<<<<<<
 *     ctx.user.max_ext_len = max_ext_len
 * 
 */
  __pyx_v_ctx->user.max_map_len = __pyx_v_max_map_len;

  /* "srsly/msgpack/_unpacker.pyx":75
 *     ctx.user.max_array_len = max_array_len
 *     ctx.user.max_map_len = max_map_len
 *     ctx.user.max_ext_len = max_ext_len             # <<<<<<<<<<<<<<
 * 
 *     if object_hook is not None and object_pairs_hook is not None:
 */
  __pyx_v_ctx->user.max_ext_len = __pyx_v_max_ext_len;

  /* "srsly/msgpack/_unpacker.pyx":77
 *     ctx.user.max_ext_len = max_ext_len
 * 
 *     if object_hook is not None and object_pairs_hook is not None:             # <<<<<<<<<<<<<<
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 */
  __pyx_t_2 = (__pyx_v_object_hook != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_object_pairs_hook != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "srsly/msgpack/_unpacker.pyx":78
 * 
 *     if object_hook is not None and object_pairs_hook is not None:
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")             # <<<<<<<<<<<<<<
 * 
 *     if object_hook is not None:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 78, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":77
 *     ctx.user.max_ext_len = max_ext_len
 * 
 *     if object_hook is not None and object_pairs_hook is not None:             # <<<<<<<<<<<<<<
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":80
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 *     if object_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_object_hook != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srsly/msgpack/_unpacker.pyx":81
 * 
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook
 */
    __pyx_t_2 = ((!(PyCallable_Check(__pyx_v_object_hook) != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "srsly/msgpack/_unpacker.pyx":82
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 82, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":81
 * 
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":83
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_hook             # <<<<<<<<<<<<<<
 * 
 *     if object_pairs_hook is None:
 */
    __pyx_v_ctx->user.object_hook = ((PyObject *)__pyx_v_object_hook);

    /* "srsly/msgpack/_unpacker.pyx":80
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")
 * 
 *     if object_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":85
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 *     if object_pairs_hook is None:             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = False
 *     else:
 */
  __pyx_t_2 = (__pyx_v_object_pairs_hook == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":86
 * 
 *     if object_pairs_hook is None:
 *         ctx.user.has_pairs_hook = False             # <<<<<<<<<<<<<<
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):
 */
    __pyx_v_ctx->user.has_pairs_hook = 0;

    /* "srsly/msgpack/_unpacker.pyx":85
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 *     if object_pairs_hook is None:             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = False
 *     else:
 */
    goto __pyx_L8;
  }

  /* "srsly/msgpack/_unpacker.pyx":88
 *         ctx.user.has_pairs_hook = False
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 */
  /*else*/ {
    __pyx_t_1 = ((!(PyCallable_Check(__pyx_v_object_pairs_hook) != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":89
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):
 *             raise TypeError("object_pairs_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 *         ctx.user.has_pairs_hook = True
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 89, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":88
 *         ctx.user.has_pairs_hook = False
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":90
 *         if not PyCallable_Check(object_pairs_hook):
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook             # <<<<<<<<<<<<<<
 *         ctx.user.has_pairs_hook = True
 * 
 */
    __pyx_v_ctx->user.object_hook = ((PyObject *)__pyx_v_object_pairs_hook);

    /* "srsly/msgpack/_unpacker.pyx":91
 *             raise TypeError("object_pairs_hook must be a callable.")
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 *         ctx.user.has_pairs_hook = True             # <<<<<<<<<<<<<<
 * 
 *     if list_hook is not None:
 */
    __pyx_v_ctx->user.has_pairs_hook = 1;
  }
  __pyx_L8:;

  /* "srsly/msgpack/_unpacker.pyx":93
 *         ctx.user.has_pairs_hook = True
 * 
 *     if list_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 */
  __pyx_t_1 = (__pyx_v_list_hook != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srsly/msgpack/_unpacker.pyx":94
 * 
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook
 */
    __pyx_t_2 = ((!(PyCallable_Check(__pyx_v_list_hook) != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "srsly/msgpack/_unpacker.pyx":95
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 95, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 95, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":94
 * 
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":96
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 *         ctx.user.list_hook = <PyObject*>list_hook             # <<<<<<<<<<<<<<
 * 
 *     if ext_hook is not None:
 */
    __pyx_v_ctx->user.list_hook = ((PyObject *)__pyx_v_list_hook);

    /* "srsly/msgpack/_unpacker.pyx":93
 *         ctx.user.has_pairs_hook = True
 * 
 *     if list_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":98
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 *     if ext_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 */
  __pyx_t_2 = (__pyx_v_ext_hook != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":99
 * 
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 */
    __pyx_t_1 = ((!(PyCallable_Check(__pyx_v_ext_hook) != 0)) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":100
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 100, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":99
 * 
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):             # <<<<<<<<<<<<<<
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":101
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 *         ctx.user.ext_hook = <PyObject*>ext_hook             # <<<<<<<<<<<<<<
 * 
 *     ctx.user.encoding = encoding
 */
    __pyx_v_ctx->user.ext_hook = ((PyObject *)__pyx_v_ext_hook);

    /* "srsly/msgpack/_unpacker.pyx":98
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 *     if ext_hook is not None:             # <<<<<<<<<<<<<<
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":103
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 *     ctx.user.encoding = encoding             # <<<<<<<<<<<<<<
 *     ctx.user.unicode_errors = unicode_errors
 * 
 */
  __pyx_v_ctx->user.encoding = __pyx_v_encoding;

  /* "srsly/msgpack/_unpacker.pyx":104
 * 
 *     ctx.user.encoding = encoding
 *     ctx.user.unicode_errors = unicode_errors             # <<<<<<<<<<<<<<
 * 
 * def default_read_extended_type(typecode, data):
 */
  __pyx_v_ctx->user.unicode_errors = __pyx_v_unicode_errors;

  /* "srsly/msgpack/_unpacker.pyx":58
 *     void unpack_clear(unpack_context* ctx)
 * 
 * cdef inline init_ctx(unpack_context *ctx,             # <<<<<<<<<<<<<<
 *                      object object_hook, object object_pairs_hook,
 *                      object list_hook, object ext_hook,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.init_ctx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":106
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_1default_read_extended_type(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_default_read_extended_type[] = "default_read_extended_type(typecode, data)";
static PyMethodDef __pyx_mdef_5srsly_7msgpack_9_unpacker_1default_read_extended_type = {"default_read_extended_type", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5srsly_7msgpack_9_unpacker_1default_read_extended_type, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5srsly_7msgpack_9_unpacker_default_read_extended_type};
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_1default_read_extended_type(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_typecode = 0;
  CYTHON_UNUSED PyObject *__pyx_v_data = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("default_read_extended_type (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_typecode,&__pyx_n_s_data,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_typecode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("default_read_extended_type", 1, 2, 2, 1); __PYX_ERR(0, 106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "default_read_extended_type") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_typecode = values[0];
    __pyx_v_data = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("default_read_extended_type", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srsly.msgpack._unpacker.default_read_extended_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_default_read_extended_type(__pyx_self, __pyx_v_typecode, __pyx_v_data);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_default_read_extended_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_typecode, CYTHON_UNUSED PyObject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("default_read_extended_type", 0);

  /* "srsly/msgpack/_unpacker.pyx":107
 * 
 * def default_read_extended_type(typecode, data):
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)             # <<<<<<<<<<<<<<
 * 
 * cdef inline int get_data_from_buffer(object obj,
 */
  __pyx_t_1 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_decode_extended_type_with, __pyx_v_typecode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_NotImplementedError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(0, 107, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":106
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.default_read_extended_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":109
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 * cdef inline int get_data_from_buffer(object obj,             # <<<<<<<<<<<<<<
 *                                      Py_buffer *view,
 *                                      char **buf,
 */

static CYTHON_INLINE int __pyx_f_5srsly_7msgpack_9_unpacker_get_data_from_buffer(PyObject *__pyx_v_obj, Py_buffer *__pyx_v_view, char **__pyx_v_buf, Py_ssize_t *__pyx_v_buffer_len, int *__pyx_v_new_protocol) {
  PyObject *__pyx_v_contiguous = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_data_from_buffer", 0);

  /* "srsly/msgpack/_unpacker.pyx":116
 *     cdef object contiguous
 *     cdef Py_buffer tmp
 *     if PyObject_CheckBuffer(obj):             # <<<<<<<<<<<<<<
 *         new_protocol[0] = 1
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 */
  __pyx_t_1 = (PyObject_CheckBuffer(__pyx_v_obj) != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":117
 *     cdef Py_buffer tmp
 *     if PyObject_CheckBuffer(obj):
 *         new_protocol[0] = 1             # <<<<<<<<<<<<<<
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *             raise
 */
    (__pyx_v_new_protocol[0]) = 1;

    /* "srsly/msgpack/_unpacker.pyx":118
 *     if PyObject_CheckBuffer(obj):
 *         new_protocol[0] = 1
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:             # <<<<<<<<<<<<<<
 *             raise
 *         if view.itemsize != 1:
 */
    __pyx_t_2 = PyObject_GetBuffer(__pyx_v_obj, __pyx_v_view, PyBUF_FULL_RO); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_2 == -1L) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":119
 *         new_protocol[0] = 1
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *             raise             # <<<<<<<<<<<<<<
 *         if view.itemsize != 1:
 *             PyBuffer_Release(view)
 */
      __Pyx_ReraiseException(); __PYX_ERR(0, 119, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":118
 *     if PyObject_CheckBuffer(obj):
 *         new_protocol[0] = 1
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:             # <<<<<<<<<<<<<<
 *             raise
 *         if view.itemsize != 1:
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":120
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *             raise
 *         if view.itemsize != 1:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")
 */
    __pyx_t_1 = ((__pyx_v_view->itemsize != 1) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":121
 *             raise
 *         if view.itemsize != 1:
 *             PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *             raise BufferError("cannot unpack from multi-byte object")
 *         if PyBuffer_IsContiguous(view, b'A') == 0:
 */
      PyBuffer_Release(__pyx_v_view);

      /* "srsly/msgpack/_unpacker.pyx":122
 *         if view.itemsize != 1:
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")             # <<<<<<<<<<<<<<
 *         if PyBuffer_IsContiguous(view, b'A') == 0:
 *             PyBuffer_Release(view)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_BufferError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 122, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":120
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 *             raise
 *         if view.itemsize != 1:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":123
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")
 *         if PyBuffer_IsContiguous(view, b'A') == 0:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             # create a contiguous copy and get buffer
 */
    __pyx_t_1 = ((PyBuffer_IsContiguous(__pyx_v_view, 'A') == 0) != 0);
    if (__pyx_t_1) {

      /* "srsly/msgpack/_unpacker.pyx":124
 *             raise BufferError("cannot unpack from multi-byte object")
 *         if PyBuffer_IsContiguous(view, b'A') == 0:
 *             PyBuffer_Release(view)             # <<<<<<<<<<<<<<
 *             # create a contiguous copy and get buffer
 *             contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')
 */
      PyBuffer_Release(__pyx_v_view);

      /* "srsly/msgpack/_unpacker.pyx":126
 *             PyBuffer_Release(view)
 *             # create a contiguous copy and get buffer
 *             contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')             # <<<<<<<<<<<<<<
 *             PyObject_GetBuffer(contiguous, view, PyBUF_SIMPLE)
 *             # view must hold the only reference to contiguous,
 */
      __pyx_t_3 = PyMemoryView_GetContiguous(__pyx_v_obj, PyBUF_READ, 'C'); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_contiguous = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "srsly/msgpack/_unpacker.pyx":127
 *             # create a contiguous copy and get buffer
 *             contiguous = PyMemoryView_GetContiguous(obj, PyBUF_READ, b'C')
 *             PyObject_GetBuffer(contiguous, view, PyBUF_SIMPLE)             # <<<<<<<<<<<<<<
 *             # view must hold the only reference to contiguous,
 *             # so memory is freed when view is released
 */
      __pyx_t_2 = PyObject_GetBuffer(__pyx_v_contiguous, __pyx_v_view, PyBUF_SIMPLE); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 127, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":130
 *             # view must hold the only reference to contiguous,
 *             # so memory is freed when view is released
 *             Py_DECREF(contiguous)             # <<<<<<<<<<<<<<
 *         buffer_len[0] = view.len
 *         buf[0] = <char*> view.buf
 */
      Py_DECREF(__pyx_v_contiguous);

      /* "srsly/msgpack/_unpacker.pyx":123
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")
 *         if PyBuffer_IsContiguous(view, b'A') == 0:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(view)
 *             # create a contiguous copy and get buffer
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":131
 *             # so memory is freed when view is released
 *             Py_DECREF(contiguous)
 *         buffer_len[0] = view.len             # <<<<<<<<<<<<<<
 *         buf[0] = <char*> view.buf
 *         return 1
 */
    __pyx_t_4 = __pyx_v_view->len;
    (__pyx_v_buffer_len[0]) = __pyx_t_4;

    /* "srsly/msgpack/_unpacker.pyx":132
 *             Py_DECREF(contiguous)
 *         buffer_len[0] = view.len
 *         buf[0] = <char*> view.buf             # <<<<<<<<<<<<<<
 *         return 1
 *     else:
 */
    (__pyx_v_buf[0]) = ((char *)__pyx_v_view->buf);

    /* "srsly/msgpack/_unpacker.pyx":133
 *         buffer_len[0] = view.len
 *         buf[0] = <char*> view.buf
 *         return 1             # <<<<<<<<<<<<<<
 *     else:
 *         new_protocol[0] = 0
 */
    __pyx_r = 1;
    goto __pyx_L0;

    /* "srsly/msgpack/_unpacker.pyx":116
 *     cdef object contiguous
 *     cdef Py_buffer tmp
 *     if PyObject_CheckBuffer(obj):             # <<<<<<<<<<<<<<
 *         new_protocol[0] = 1
 *         if PyObject_GetBuffer(obj, view, PyBUF_FULL_RO) == -1:
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":135
 *         return 1
 *     else:
 *         new_protocol[0] = 0             # <<<<<<<<<<<<<<
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:
 *             raise BufferError("could not get memoryview")
 */
  /*else*/ {
    (__pyx_v_new_protocol[0]) = 0;

    /* "srsly/msgpack/_unpacker.pyx":136
 *     else:
 *         new_protocol[0] = 0
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:             # <<<<<<<<<<<<<<
 *             raise BufferError("could not get memoryview")
 *         PyErr_WarnEx(RuntimeWarning,
 */
    __pyx_t_2 = PyObject_AsReadBuffer(__pyx_v_obj, ((void const **)__pyx_v_buf), __pyx_v_buffer_len); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 136, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_2 == -1L) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":137
 *         new_protocol[0] = 0
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:
 *             raise BufferError("could not get memoryview")             # <<<<<<<<<<<<<<
 *         PyErr_WarnEx(RuntimeWarning,
 *                      "using old buffer interface to unpack %s; "
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_BufferError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 137, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":136
 *     else:
 *         new_protocol[0] = 0
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:             # <<<<<<<<<<<<<<
 *             raise BufferError("could not get memoryview")
 *         PyErr_WarnEx(RuntimeWarning,
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":141
 *                      "using old buffer interface to unpack %s; "
 *                      "this leads to unpacking errors if slicing is used and "
 *                      "will be removed in a future version" % type(obj),             # <<<<<<<<<<<<<<
 *                      1)
 *         return 1
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_7cpython_4type_type), __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_using_old_buffer_interface_to_un, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_AsWritableString(__pyx_t_5); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 141, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":138
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:
 *             raise BufferError("could not get memoryview")
 *         PyErr_WarnEx(RuntimeWarning,             # <<<<<<<<<<<<<<
 *                      "using old buffer interface to unpack %s; "
 *                      "this leads to unpacking errors if slicing is used and "
 */
    __pyx_t_2 = PyErr_WarnEx(__pyx_builtin_RuntimeWarning, __pyx_t_6, 1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "srsly/msgpack/_unpacker.pyx":143
 *                      "will be removed in a future version" % type(obj),
 *                      1)
 *         return 1             # <<<<<<<<<<<<<<
 * 
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 */
    __pyx_r = 1;
    goto __pyx_L0;
  }

  /* "srsly/msgpack/_unpacker.pyx":109
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 * cdef inline int get_data_from_buffer(object obj,             # <<<<<<<<<<<<<<
 *                                      Py_buffer *view,
 *                                      char **buf,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.get_data_from_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_contiguous);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":147
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_3unpackb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_2unpackb[] = "unpackb(packed, object_hook=None, list_hook=None, bool use_list=True, bool raw=True, bool strict_map_key=False, encoding=None, unicode_errors=None, object_pairs_hook=None, ext_hook=ExtType, Py_ssize_t max_str_len=MAX_LENGTH, Py_ssize_t max_bin_len=MAX_LENGTH, Py_ssize_t max_array_len=MAX_LENGTH, Py_ssize_t max_map_len=MAX_LENGTH, Py_ssize_t max_ext_len=MAX_LENGTH)\n\n    Unpack packed_bytes to object. Returns an unpacked object.\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``ValueError`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n\n    See :class:`Unpacker` for options.\n    ";
static PyMethodDef __pyx_mdef_5srsly_7msgpack_9_unpacker_3unpackb = {"unpackb", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5srsly_7msgpack_9_unpacker_3unpackb, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5srsly_7msgpack_9_unpacker_2unpackb};
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_3unpackb(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_packed = 0;
  PyObject *__pyx_v_object_hook = 0;
  PyObject *__pyx_v_list_hook = 0;
  int __pyx_v_use_list;
  int __pyx_v_raw;
  int __pyx_v_strict_map_key;
  PyObject *__pyx_v_encoding = 0;
  PyObject *__pyx_v_unicode_errors = 0;
  PyObject *__pyx_v_object_pairs_hook = 0;
  PyObject *__pyx_v_ext_hook = 0;
  Py_ssize_t __pyx_v_max_str_len;
  Py_ssize_t __pyx_v_max_bin_len;
  Py_ssize_t __pyx_v_max_array_len;
  Py_ssize_t __pyx_v_max_map_len;
  Py_ssize_t __pyx_v_max_ext_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpackb (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_packed,&__pyx_n_s_object_hook,&__pyx_n_s_list_hook,&__pyx_n_s_use_list,&__pyx_n_s_raw,&__pyx_n_s_strict_map_key,&__pyx_n_s_encoding,&__pyx_n_s_unicode_errors,&__pyx_n_s_object_pairs_hook,&__pyx_n_s_ext_hook,&__pyx_n_s_max_str_len,&__pyx_n_s_max_bin_len,&__pyx_n_s_max_array_len,&__pyx_n_s_max_map_len,&__pyx_n_s_max_ext_len,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);

    /* "srsly/msgpack/_unpacker.pyx":149
 * def unpackb(object packed, object object_hook=None, object list_hook=None,
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,             # <<<<<<<<<<<<<<
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=MAX_LENGTH,
 */
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);

    /* "srsly/msgpack/_unpacker.pyx":150
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_str_len=MAX_LENGTH,
 *             Py_ssize_t max_bin_len=MAX_LENGTH,
 */
    values[8] = ((PyObject *)Py_None);
    values[9] = __pyx_k__8;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_packed)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_object_hook);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_list_hook);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_list);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raw);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strict_map_key);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_encoding);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unicode_errors);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_object_pairs_hook);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ext_hook);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_str_len);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_bin_len);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_array_len);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_map_len);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_ext_len);
          if (value) { values[14] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "unpackb") < 0)) __PYX_ERR(0, 147, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_packed = values[0];
    __pyx_v_object_hook = values[1];
    __pyx_v_list_hook = values[2];
    if (values[3]) {
      __pyx_v_use_list = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_use_list == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    } else {

      /* "srsly/msgpack/_unpacker.pyx":148
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,             # <<<<<<<<<<<<<<
 *             encoding=None, unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,
 */
      __pyx_v_use_list = ((int)1);
    }
    if (values[4]) {
      __pyx_v_raw = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_raw == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    } else {
      __pyx_v_raw = ((int)1);
    }
    if (values[5]) {
      __pyx_v_strict_map_key = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_strict_map_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    } else {
      __pyx_v_strict_map_key = ((int)0);
    }
    __pyx_v_encoding = values[6];
    __pyx_v_unicode_errors = values[7];
    __pyx_v_object_pairs_hook = values[8];
    __pyx_v_ext_hook = values[9];
    if (values[10]) {
      __pyx_v_max_str_len = __Pyx_PyIndex_AsSsize_t(values[10]); if (unlikely((__pyx_v_max_str_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
    } else {
      __pyx_v_max_str_len = __pyx_k__9;
    }
    if (values[11]) {
      __pyx_v_max_bin_len = __Pyx_PyIndex_AsSsize_t(values[11]); if (unlikely((__pyx_v_max_bin_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
    } else {
      __pyx_v_max_bin_len = __pyx_k__10;
    }
    if (values[12]) {
      __pyx_v_max_array_len = __Pyx_PyIndex_AsSsize_t(values[12]); if (unlikely((__pyx_v_max_array_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 153, __pyx_L3_error)
    } else {
      __pyx_v_max_array_len = __pyx_k__11;
    }
    if (values[13]) {
      __pyx_v_max_map_len = __Pyx_PyIndex_AsSsize_t(values[13]); if (unlikely((__pyx_v_max_map_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
    } else {
      __pyx_v_max_map_len = __pyx_k__12;
    }
    if (values[14]) {
      __pyx_v_max_ext_len = __Pyx_PyIndex_AsSsize_t(values[14]); if (unlikely((__pyx_v_max_ext_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
    } else {
      __pyx_v_max_ext_len = __pyx_k__13;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpackb", 0, 1, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 147, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srsly.msgpack._unpacker.unpackb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_2unpackb(__pyx_self, __pyx_v_packed, __pyx_v_object_hook, __pyx_v_list_hook, __pyx_v_use_list, __pyx_v_raw, __pyx_v_strict_map_key, __pyx_v_encoding, __pyx_v_unicode_errors, __pyx_v_object_pairs_hook, __pyx_v_ext_hook, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len);

  /* "srsly/msgpack/_unpacker.pyx":147
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_2unpackb(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_packed, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_list_hook, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_strict_map_key, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len) {
  unpack_context __pyx_v_ctx;
  Py_ssize_t __pyx_v_off;
  int __pyx_v_ret;
  Py_buffer __pyx_v_view;
  char *__pyx_v_buf;
  Py_ssize_t __pyx_v_buf_len;
  char const *__pyx_v_cenc;
  char const *__pyx_v_cerr;
  int __pyx_v_new_protocol;
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char const *__pyx_t_6;
  char const *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  char const *__pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpackb", 0);
  __Pyx_INCREF(__pyx_v_encoding);
  __Pyx_INCREF(__pyx_v_unicode_errors);

  /* "srsly/msgpack/_unpacker.pyx":168
 *     """
 *     cdef unpack_context ctx
 *     cdef Py_ssize_t off = 0             # <<<<<<<<<<<<<<
 *     cdef int ret
 * 
 */
  __pyx_v_off = 0;

  /* "srsly/msgpack/_unpacker.pyx":172
 * 
 *     cdef Py_buffer view
 *     cdef char* buf = NULL             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t buf_len
 *     cdef const char* cenc = NULL
 */
  __pyx_v_buf = NULL;

  /* "srsly/msgpack/_unpacker.pyx":174
 *     cdef char* buf = NULL
 *     cdef Py_ssize_t buf_len
 *     cdef const char* cenc = NULL             # <<<<<<<<<<<<<<
 *     cdef const char* cerr = NULL
 *     cdef int new_protocol = 0
 */
  __pyx_v_cenc = NULL;

  /* "srsly/msgpack/_unpacker.pyx":175
 *     cdef Py_ssize_t buf_len
 *     cdef const char* cenc = NULL
 *     cdef const char* cerr = NULL             # <<<<<<<<<<<<<<
 *     cdef int new_protocol = 0
 * 
 */
  __pyx_v_cerr = NULL;

  /* "srsly/msgpack/_unpacker.pyx":176
 *     cdef const char* cenc = NULL
 *     cdef const char* cerr = NULL
 *     cdef int new_protocol = 0             # <<<<<<<<<<<<<<
 * 
 *     if encoding is not None:
 */
  __pyx_v_new_protocol = 0;

  /* "srsly/msgpack/_unpacker.pyx":178
 *     cdef int new_protocol = 0
 * 
 *     if encoding is not None:             # <<<<<<<<<<<<<<
 *         encoding = ensure_bytes(encoding)
 *         cenc = encoding
 */
  __pyx_t_1 = (__pyx_v_encoding != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "srsly/msgpack/_unpacker.pyx":179
 * 
 *     if encoding is not None:
 *         encoding = ensure_bytes(encoding)             # <<<<<<<<<<<<<<
 *         cenc = encoding
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ensure_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_encoding);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_encoding, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "srsly/msgpack/_unpacker.pyx":180
 *     if encoding is not None:
 *         encoding = ensure_bytes(encoding)
 *         cenc = encoding             # <<<<<<<<<<<<<<
 * 
 *     if unicode_errors is not None:
 */
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_encoding); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(0, 180, __pyx_L1_error)
    __pyx_v_cenc = __pyx_t_6;

    /* "srsly/msgpack/_unpacker.pyx":178
 *     cdef int new_protocol = 0
 * 
 *     if encoding is not None:             # <<<<<<<<<<<<<<
 *         encoding = ensure_bytes(encoding)
 *         cenc = encoding
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":182
 *         cenc = encoding
 * 
 *     if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *         unicode_errors = ensure_bytes(unicode_errors)
 *         cerr = unicode_errors
 */
  __pyx_t_2 = (__pyx_v_unicode_errors != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":183
 * 
 *     if unicode_errors is not None:
 *         unicode_errors = ensure_bytes(unicode_errors)             # <<<<<<<<<<<<<<
 *         cerr = unicode_errors
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ensure_bytes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_unicode_errors) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_unicode_errors);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_unicode_errors, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "srsly/msgpack/_unpacker.pyx":184
 *     if unicode_errors is not None:
 *         unicode_errors = ensure_bytes(unicode_errors)
 *         cerr = unicode_errors             # <<<<<<<<<<<<<<
 * 
 *     get_data_from_buffer(packed, &view, &buf, &buf_len, &new_protocol)
 */
    __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_unicode_errors); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L1_error)
    __pyx_v_cerr = __pyx_t_7;

    /* "srsly/msgpack/_unpacker.pyx":182
 *         cenc = encoding
 * 
 *     if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *         unicode_errors = ensure_bytes(unicode_errors)
 *         cerr = unicode_errors
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":186
 *         cerr = unicode_errors
 * 
 *     get_data_from_buffer(packed, &view, &buf, &buf_len, &new_protocol)             # <<<<<<<<<<<<<<
 *     try:
 *         init_ctx(&ctx, object_hook, object_pairs_hook, list_hook, ext_hook,
 */
  __pyx_t_8 = __pyx_f_5srsly_7msgpack_9_unpacker_get_data_from_buffer(__pyx_v_packed, (&__pyx_v_view), (&__pyx_v_buf), (&__pyx_v_buf_len), (&__pyx_v_new_protocol)); if (unlikely(__pyx_t_8 == ((int)0))) __PYX_ERR(0, 186, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":187
 * 
 *     get_data_from_buffer(packed, &view, &buf, &buf_len, &new_protocol)
 *     try:             # <<<<<<<<<<<<<<
 *         init_ctx(&ctx, object_hook, object_pairs_hook, list_hook, ext_hook,
 *                  use_list, raw, strict_map_key, cenc, cerr,
 */
  /*try:*/ {

    /* "srsly/msgpack/_unpacker.pyx":188
 *     get_data_from_buffer(packed, &view, &buf, &buf_len, &new_protocol)
 *     try:
 *         init_ctx(&ctx, object_hook, object_pairs_hook, list_hook, ext_hook,             # <<<<<<<<<<<<<<
 *                  use_list, raw, strict_map_key, cenc, cerr,
 *                  max_str_len, max_bin_len, max_array_len, max_map_len, max_ext_len)
 */
    __pyx_t_3 = __pyx_f_5srsly_7msgpack_9_unpacker_init_ctx((&__pyx_v_ctx), __pyx_v_object_hook, __pyx_v_object_pairs_hook, __pyx_v_list_hook, __pyx_v_ext_hook, __pyx_v_use_list, __pyx_v_raw, __pyx_v_strict_map_key, __pyx_v_cenc, __pyx_v_cerr, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "srsly/msgpack/_unpacker.pyx":191
 *                  use_list, raw, strict_map_key, cenc, cerr,
 *                  max_str_len, max_bin_len, max_array_len, max_map_len, max_ext_len)
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)             # <<<<<<<<<<<<<<
 *     finally:
 *         if new_protocol:
 */
    __pyx_t_8 = unpack_construct((&__pyx_v_ctx), __pyx_v_buf, __pyx_v_buf_len, (&__pyx_v_off)); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 191, __pyx_L6_error)
    __pyx_v_ret = __pyx_t_8;
  }

  /* "srsly/msgpack/_unpacker.pyx":193
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)
 *     finally:
 *         if new_protocol:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&view);
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_1 = (__pyx_v_new_protocol != 0);
      if (__pyx_t_1) {

        /* "srsly/msgpack/_unpacker.pyx":194
 *     finally:
 *         if new_protocol:
 *             PyBuffer_Release(&view);             # <<<<<<<<<<<<<<
 * 
 *     if ret == 1:
 */
        PyBuffer_Release((&__pyx_v_view));

        /* "srsly/msgpack/_unpacker.pyx":193
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)
 *     finally:
 *         if new_protocol:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&view);
 * 
 */
      }
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __Pyx_XGOTREF(__pyx_t_13);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_10 = __pyx_filename;
      {
        __pyx_t_1 = (__pyx_v_new_protocol != 0);
        if (__pyx_t_1) {

          /* "srsly/msgpack/_unpacker.pyx":194
 *     finally:
 *         if new_protocol:
 *             PyBuffer_Release(&view);             # <<<<<<<<<<<<<<
 * 
 *     if ret == 1:
 */
          PyBuffer_Release((&__pyx_v_view));

          /* "srsly/msgpack/_unpacker.pyx":193
 *         ret = unpack_construct(&ctx, buf, buf_len, &off)
 *     finally:
 *         if new_protocol:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&view);
 * 
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_15);
        __Pyx_XGIVEREF(__pyx_t_16);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      }
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_13);
      __Pyx_ErrRestore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      __pyx_t_11 = 0; __pyx_t_12 = 0; __pyx_t_13 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_10;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "srsly/msgpack/_unpacker.pyx":196
 *             PyBuffer_Release(&view);
 * 
 *     if ret == 1:             # <<<<<<<<<<<<<<
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 */
  __pyx_t_1 = ((__pyx_v_ret == 1) != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":197
 * 
 *     if ret == 1:
 *         obj = unpack_data(&ctx)             # <<<<<<<<<<<<<<
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 */
    __pyx_t_3 = unpack_data((&__pyx_v_ctx)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_obj = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "srsly/msgpack/_unpacker.pyx":198
 *     if ret == 1:
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:             # <<<<<<<<<<<<<<
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 */
    __pyx_t_1 = ((__pyx_v_off < __pyx_v_buf_len) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":199
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))             # <<<<<<<<<<<<<<
 *         return obj
 *     unpack_clear(&ctx)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ExtraData); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyBytes_FromStringAndSize((__pyx_v_buf + __pyx_v_off), (__pyx_v_buf_len - __pyx_v_off)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_17 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_17)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_obj, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
        PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_obj, __pyx_t_5};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      } else
      #endif
      {
        __pyx_t_18 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_18);
        if (__pyx_t_17) {
          __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17); __pyx_t_17 = NULL;
        }
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_9, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_9, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 199, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 199, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":198
 *     if ret == 1:
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:             # <<<<<<<<<<<<<<
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":200
 *         if off < buf_len:
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj             # <<<<<<<<<<<<<<
 *     unpack_clear(&ctx)
 *     if ret == 0:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_obj);
    __pyx_r = __pyx_v_obj;
    goto __pyx_L0;

    /* "srsly/msgpack/_unpacker.pyx":196
 *             PyBuffer_Release(&view);
 * 
 *     if ret == 1:             # <<<<<<<<<<<<<<
 *         obj = unpack_data(&ctx)
 *         if off < buf_len:
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":201
 *             raise ExtraData(obj, PyBytes_FromStringAndSize(buf+off, buf_len-off))
 *         return obj
 *     unpack_clear(&ctx)             # <<<<<<<<<<<<<<
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")
 */
  unpack_clear((&__pyx_v_ctx));

  /* "srsly/msgpack/_unpacker.pyx":202
 *         return obj
 *     unpack_clear(&ctx)
 *     if ret == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 */
  switch (__pyx_v_ret) {
    case 0:

    /* "srsly/msgpack/_unpacker.pyx":203
 *     unpack_clear(&ctx)
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")             # <<<<<<<<<<<<<<
 *     elif ret == -2:
 *         raise FormatError
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 203, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":202
 *         return obj
 *     unpack_clear(&ctx)
 *     if ret == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 */
    break;
    case -2L:

    /* "srsly/msgpack/_unpacker.pyx":205
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:
 *         raise FormatError             # <<<<<<<<<<<<<<
 *     elif ret == -3:
 *         raise StackError
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_FormatError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 205, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":204
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")
 *     elif ret == -2:             # <<<<<<<<<<<<<<
 *         raise FormatError
 *     elif ret == -3:
 */
    break;
    case -3L:

    /* "srsly/msgpack/_unpacker.pyx":207
 *         raise FormatError
 *     elif ret == -3:
 *         raise StackError             # <<<<<<<<<<<<<<
 *     raise ValueError("Unpack failed: error = %d" % (ret,))
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_StackError); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 207, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":206
 *     elif ret == -2:
 *         raise FormatError
 *     elif ret == -3:             # <<<<<<<<<<<<<<
 *         raise StackError
 *     raise ValueError("Unpack failed: error = %d" % (ret,))
 */
    break;
    default: break;
  }

  /* "srsly/msgpack/_unpacker.pyx":208
 *     elif ret == -3:
 *         raise StackError
 *     raise ValueError("Unpack failed: error = %d" % (ret,))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unpack_failed_error_d, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 208, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":147
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.unpackb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_encoding);
  __Pyx_XDECREF(__pyx_v_unicode_errors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":211
 * 
 * 
 * def unpack(object stream, **kwargs):             # <<<<<<<<<<<<<<
 *     data = stream.read()
 *     return unpackb(data, **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_5unpack(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_4unpack[] = "unpack(stream, **kwargs)";
static PyMethodDef __pyx_mdef_5srsly_7msgpack_9_unpacker_5unpack = {"unpack", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_5srsly_7msgpack_9_unpacker_5unpack, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5srsly_7msgpack_9_unpacker_4unpack};
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_5unpack(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_stream = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpack (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_stream,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "unpack") < 0)) __PYX_ERR(0, 211, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_stream = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("unpack", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 211, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("srsly.msgpack._unpacker.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_4unpack(__pyx_self, __pyx_v_stream, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_4unpack(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_stream, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpack", 0);

  /* "srsly/msgpack/_unpacker.pyx":212
 * 
 * def unpack(object stream, **kwargs):
 *     data = stream.read()             # <<<<<<<<<<<<<<
 *     return unpackb(data, **kwargs)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_stream, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_data = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "srsly/msgpack/_unpacker.pyx":213
 * def unpack(object stream, **kwargs):
 *     data = stream.read()
 *     return unpackb(data, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_unpackb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_data);
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":211
 * 
 * 
 * def unpack(object stream, **kwargs):             # <<<<<<<<<<<<<<
 *     data = stream.read()
 *     return unpackb(data, **kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":321
 *     cdef uint64_t stream_offset
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.buf = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker___cinit__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker___cinit__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "srsly/msgpack/_unpacker.pyx":322
 * 
 *     def __cinit__(self):
 *         self.buf = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->buf = NULL;

  /* "srsly/msgpack/_unpacker.pyx":321
 *     cdef uint64_t stream_offset
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.buf = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":324
 *         self.buf = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.buf)
 *         self.buf = NULL
 */

/* Python wrapper */
static void __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_2__dealloc__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_2__dealloc__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "srsly/msgpack/_unpacker.pyx":325
 * 
 *     def __dealloc__(self):
 *         PyMem_Free(self.buf)             # <<<<<<<<<<<<<<
 *         self.buf = NULL
 * 
 */
  PyMem_Free(__pyx_v_self->buf);

  /* "srsly/msgpack/_unpacker.pyx":326
 *     def __dealloc__(self):
 *         PyMem_Free(self.buf)
 *         self.buf = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,
 */
  __pyx_v_self->buf = NULL;

  /* "srsly/msgpack/_unpacker.pyx":324
 *         self.buf = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         PyMem_Free(self.buf)
 *         self.buf = NULL
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "srsly/msgpack/_unpacker.pyx":328
 *         self.buf = NULL
 * 
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,             # <<<<<<<<<<<<<<
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 */

/* Python wrapper */
static int __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file_like = 0;
  Py_ssize_t __pyx_v_read_size;
  int __pyx_v_use_list;
  int __pyx_v_raw;
  int __pyx_v_strict_map_key;
  PyObject *__pyx_v_object_hook = 0;
  PyObject *__pyx_v_object_pairs_hook = 0;
  PyObject *__pyx_v_list_hook = 0;
  PyObject *__pyx_v_encoding = 0;
  PyObject *__pyx_v_unicode_errors = 0;
  Py_ssize_t __pyx_v_max_buffer_size;
  PyObject *__pyx_v_ext_hook = 0;
  Py_ssize_t __pyx_v_max_str_len;
  Py_ssize_t __pyx_v_max_bin_len;
  Py_ssize_t __pyx_v_max_array_len;
  Py_ssize_t __pyx_v_max_map_len;
  Py_ssize_t __pyx_v_max_ext_len;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file_like,&__pyx_n_s_read_size,&__pyx_n_s_use_list,&__pyx_n_s_raw,&__pyx_n_s_strict_map_key,&__pyx_n_s_object_hook,&__pyx_n_s_object_pairs_hook,&__pyx_n_s_list_hook,&__pyx_n_s_encoding,&__pyx_n_s_unicode_errors,&__pyx_n_s_max_buffer_size,&__pyx_n_s_ext_hook,&__pyx_n_s_max_str_len,&__pyx_n_s_max_bin_len,&__pyx_n_s_max_array_len,&__pyx_n_s_max_map_len,&__pyx_n_s_max_ext_len,0};
    PyObject* values[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);

    /* "srsly/msgpack/_unpacker.pyx":330
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *                  encoding=None, unicode_errors=None, Py_ssize_t max_buffer_size=0,
 *                  object ext_hook=ExtType,
 */
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);

    /* "srsly/msgpack/_unpacker.pyx":331
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 *                  encoding=None, unicode_errors=None, Py_ssize_t max_buffer_size=0,             # <<<<<<<<<<<<<<
 *                  object ext_hook=ExtType,
 *                  Py_ssize_t max_str_len=1024*1024,
 */
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[11] = __pyx_k__15;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_file_like);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_read_size);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_list);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_raw);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_strict_map_key);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_object_hook);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_object_pairs_hook);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_list_hook);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_encoding);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_unicode_errors);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_buffer_size);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ext_hook);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_str_len);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_bin_len);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_array_len);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_map_len);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_ext_len);
          if (value) { values[16] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 328, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file_like = values[0];
    if (values[1]) {
      __pyx_v_read_size = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_read_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 328, __pyx_L3_error)
    } else {
      __pyx_v_read_size = ((Py_ssize_t)0);
    }
    if (values[2]) {
      __pyx_v_use_list = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_use_list == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    } else {

      /* "srsly/msgpack/_unpacker.pyx":329
 * 
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,             # <<<<<<<<<<<<<<
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 *                  encoding=None, unicode_errors=None, Py_ssize_t max_buffer_size=0,
 */
      __pyx_v_use_list = ((int)1);
    }
    if (values[3]) {
      __pyx_v_raw = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_raw == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    } else {
      __pyx_v_raw = ((int)1);
    }
    if (values[4]) {
      __pyx_v_strict_map_key = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_strict_map_key == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L3_error)
    } else {
      __pyx_v_strict_map_key = ((int)0);
    }
    __pyx_v_object_hook = values[5];
    __pyx_v_object_pairs_hook = values[6];
    __pyx_v_list_hook = values[7];
    __pyx_v_encoding = values[8];
    __pyx_v_unicode_errors = values[9];
    if (values[10]) {
      __pyx_v_max_buffer_size = __Pyx_PyIndex_AsSsize_t(values[10]); if (unlikely((__pyx_v_max_buffer_size == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 331, __pyx_L3_error)
    } else {
      __pyx_v_max_buffer_size = ((Py_ssize_t)0);
    }
    __pyx_v_ext_hook = values[11];
    if (values[12]) {
      __pyx_v_max_str_len = __Pyx_PyIndex_AsSsize_t(values[12]); if (unlikely((__pyx_v_max_str_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 333, __pyx_L3_error)
    } else {
      __pyx_v_max_str_len = ((Py_ssize_t)0x100000);
    }
    if (values[13]) {
      __pyx_v_max_bin_len = __Pyx_PyIndex_AsSsize_t(values[13]); if (unlikely((__pyx_v_max_bin_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L3_error)
    } else {
      __pyx_v_max_bin_len = ((Py_ssize_t)0x100000);
    }
    if (values[14]) {
      __pyx_v_max_array_len = __Pyx_PyIndex_AsSsize_t(values[14]); if (unlikely((__pyx_v_max_array_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L3_error)
    } else {
      __pyx_v_max_array_len = ((Py_ssize_t)0x20000);
    }
    if (values[15]) {
      __pyx_v_max_map_len = __Pyx_PyIndex_AsSsize_t(values[15]); if (unlikely((__pyx_v_max_map_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    } else {
      __pyx_v_max_map_len = ((Py_ssize_t)0x8000);
    }
    if (values[16]) {
      __pyx_v_max_ext_len = __Pyx_PyIndex_AsSsize_t(values[16]); if (unlikely((__pyx_v_max_ext_len == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L3_error)
    } else {
      __pyx_v_max_ext_len = ((Py_ssize_t)0x100000);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 17, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 328, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_4__init__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self), __pyx_v_file_like, __pyx_v_read_size, __pyx_v_use_list, __pyx_v_raw, __pyx_v_strict_map_key, __pyx_v_object_hook, __pyx_v_object_pairs_hook, __pyx_v_list_hook, __pyx_v_encoding, __pyx_v_unicode_errors, __pyx_v_max_buffer_size, __pyx_v_ext_hook, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len);

  /* "srsly/msgpack/_unpacker.pyx":328
 *         self.buf = NULL
 * 
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,             # <<<<<<<<<<<<<<
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_4__init__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, PyObject *__pyx_v_file_like, Py_ssize_t __pyx_v_read_size, int __pyx_v_use_list, int __pyx_v_raw, int __pyx_v_strict_map_key, PyObject *__pyx_v_object_hook, PyObject *__pyx_v_object_pairs_hook, PyObject *__pyx_v_list_hook, PyObject *__pyx_v_encoding, PyObject *__pyx_v_unicode_errors, Py_ssize_t __pyx_v_max_buffer_size, PyObject *__pyx_v_ext_hook, Py_ssize_t __pyx_v_max_str_len, Py_ssize_t __pyx_v_max_bin_len, Py_ssize_t __pyx_v_max_array_len, Py_ssize_t __pyx_v_max_map_len, Py_ssize_t __pyx_v_max_ext_len) {
  char const *__pyx_v_cenc;
  char const *__pyx_v_cerr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  char const *__pyx_t_9;
  char const *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_INCREF(__pyx_v_encoding);
  __Pyx_INCREF(__pyx_v_unicode_errors);

  /* "srsly/msgpack/_unpacker.pyx":338
 *                  Py_ssize_t max_map_len=32*1024,
 *                  Py_ssize_t max_ext_len=1024*1024):
 *         cdef const char *cenc=NULL,             # <<<<<<<<<<<<<<
 *         cdef const char *cerr=NULL
 * 
 */
  __pyx_v_cenc = NULL;

  /* "srsly/msgpack/_unpacker.pyx":339
 *                  Py_ssize_t max_ext_len=1024*1024):
 *         cdef const char *cenc=NULL,
 *         cdef const char *cerr=NULL             # <<<<<<<<<<<<<<
 * 
 *         self.object_hook = object_hook
 */
  __pyx_v_cerr = NULL;

  /* "srsly/msgpack/_unpacker.pyx":341
 *         cdef const char *cerr=NULL
 * 
 *         self.object_hook = object_hook             # <<<<<<<<<<<<<<
 *         self.object_pairs_hook = object_pairs_hook
 *         self.list_hook = list_hook
 */
  __Pyx_INCREF(__pyx_v_object_hook);
  __Pyx_GIVEREF(__pyx_v_object_hook);
  __Pyx_GOTREF(__pyx_v_self->object_hook);
  __Pyx_DECREF(__pyx_v_self->object_hook);
  __pyx_v_self->object_hook = __pyx_v_object_hook;

  /* "srsly/msgpack/_unpacker.pyx":342
 * 
 *         self.object_hook = object_hook
 *         self.object_pairs_hook = object_pairs_hook             # <<<<<<<<<<<<<<
 *         self.list_hook = list_hook
 *         self.ext_hook = ext_hook
 */
  __Pyx_INCREF(__pyx_v_object_pairs_hook);
  __Pyx_GIVEREF(__pyx_v_object_pairs_hook);
  __Pyx_GOTREF(__pyx_v_self->object_pairs_hook);
  __Pyx_DECREF(__pyx_v_self->object_pairs_hook);
  __pyx_v_self->object_pairs_hook = __pyx_v_object_pairs_hook;

  /* "srsly/msgpack/_unpacker.pyx":343
 *         self.object_hook = object_hook
 *         self.object_pairs_hook = object_pairs_hook
 *         self.list_hook = list_hook             # <<<<<<<<<<<<<<
 *         self.ext_hook = ext_hook
 * 
 */
  __Pyx_INCREF(__pyx_v_list_hook);
  __Pyx_GIVEREF(__pyx_v_list_hook);
  __Pyx_GOTREF(__pyx_v_self->list_hook);
  __Pyx_DECREF(__pyx_v_self->list_hook);
  __pyx_v_self->list_hook = __pyx_v_list_hook;

  /* "srsly/msgpack/_unpacker.pyx":344
 *         self.object_pairs_hook = object_pairs_hook
 *         self.list_hook = list_hook
 *         self.ext_hook = ext_hook             # <<<<<<<<<<<<<<
 * 
 *         self.file_like = file_like
 */
  __Pyx_INCREF(__pyx_v_ext_hook);
  __Pyx_GIVEREF(__pyx_v_ext_hook);
  __Pyx_GOTREF(__pyx_v_self->ext_hook);
  __Pyx_DECREF(__pyx_v_self->ext_hook);
  __pyx_v_self->ext_hook = __pyx_v_ext_hook;

  /* "srsly/msgpack/_unpacker.pyx":346
 *         self.ext_hook = ext_hook
 * 
 *         self.file_like = file_like             # <<<<<<<<<<<<<<
 *         if file_like:
 *             self.file_like_read = file_like.read
 */
  __Pyx_INCREF(__pyx_v_file_like);
  __Pyx_GIVEREF(__pyx_v_file_like);
  __Pyx_GOTREF(__pyx_v_self->file_like);
  __Pyx_DECREF(__pyx_v_self->file_like);
  __pyx_v_self->file_like = __pyx_v_file_like;

  /* "srsly/msgpack/_unpacker.pyx":347
 * 
 *         self.file_like = file_like
 *         if file_like:             # <<<<<<<<<<<<<<
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_file_like); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":348
 *         self.file_like = file_like
 *         if file_like:
 *             self.file_like_read = file_like.read             # <<<<<<<<<<<<<<
 *             if not PyCallable_Check(self.file_like_read):
 *                 raise TypeError("`file_like.read` must be a callable.")
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_file_like, __pyx_n_s_read); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->file_like_read);
    __Pyx_DECREF(__pyx_v_self->file_like_read);
    __pyx_v_self->file_like_read = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "srsly/msgpack/_unpacker.pyx":349
 *         if file_like:
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`file_like.read` must be a callable.")
 *         if not max_buffer_size:
 */
    __pyx_t_2 = __pyx_v_self->file_like_read;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_1 = ((!(PyCallable_Check(__pyx_t_2) != 0)) != 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "srsly/msgpack/_unpacker.pyx":350
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):
 *                 raise TypeError("`file_like.read` must be a callable.")             # <<<<<<<<<<<<<<
 *         if not max_buffer_size:
 *             max_buffer_size = INT_MAX
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 350, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":349
 *         if file_like:
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):             # <<<<<<<<<<<<<<
 *                 raise TypeError("`file_like.read` must be a callable.")
 *         if not max_buffer_size:
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":347
 * 
 *         self.file_like = file_like
 *         if file_like:             # <<<<<<<<<<<<<<
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":351
 *             if not PyCallable_Check(self.file_like_read):
 *                 raise TypeError("`file_like.read` must be a callable.")
 *         if not max_buffer_size:             # <<<<<<<<<<<<<<
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:
 */
  __pyx_t_1 = ((!(__pyx_v_max_buffer_size != 0)) != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":352
 *                 raise TypeError("`file_like.read` must be a callable.")
 *         if not max_buffer_size:
 *             max_buffer_size = INT_MAX             # <<<<<<<<<<<<<<
 *         if read_size > max_buffer_size:
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 */
    __pyx_v_max_buffer_size = INT_MAX;

    /* "srsly/msgpack/_unpacker.pyx":351
 *             if not PyCallable_Check(self.file_like_read):
 *                 raise TypeError("`file_like.read` must be a callable.")
 *         if not max_buffer_size:             # <<<<<<<<<<<<<<
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":353
 *         if not max_buffer_size:
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:             # <<<<<<<<<<<<<<
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 *         if not read_size:
 */
  __pyx_t_1 = ((__pyx_v_read_size > __pyx_v_max_buffer_size) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srsly/msgpack/_unpacker.pyx":354
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:
 *             raise ValueError("read_size should be less or equal to max_buffer_size")             # <<<<<<<<<<<<<<
 *         if not read_size:
 *             read_size = min(max_buffer_size, 1024**2)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 354, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":353
 *         if not max_buffer_size:
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:             # <<<<<<<<<<<<<<
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 *         if not read_size:
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":355
 *         if read_size > max_buffer_size:
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 *         if not read_size:             # <<<<<<<<<<<<<<
 *             read_size = min(max_buffer_size, 1024**2)
 *         self.max_buffer_size = max_buffer_size
 */
  __pyx_t_1 = ((!(__pyx_v_read_size != 0)) != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":356
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 *         if not read_size:
 *             read_size = min(max_buffer_size, 1024**2)             # <<<<<<<<<<<<<<
 *         self.max_buffer_size = max_buffer_size
 *         self.read_size = read_size
 */
    __pyx_t_3 = 0x100000;
    __pyx_t_4 = __pyx_v_max_buffer_size;
    if (((__pyx_t_3 < __pyx_t_4) != 0)) {
      __pyx_t_5 = __pyx_t_3;
    } else {
      __pyx_t_5 = __pyx_t_4;
    }
    __pyx_v_read_size = __pyx_t_5;

    /* "srsly/msgpack/_unpacker.pyx":355
 *         if read_size > max_buffer_size:
 *             raise ValueError("read_size should be less or equal to max_buffer_size")
 *         if not read_size:             # <<<<<<<<<<<<<<
 *             read_size = min(max_buffer_size, 1024**2)
 *         self.max_buffer_size = max_buffer_size
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":357
 *         if not read_size:
 *             read_size = min(max_buffer_size, 1024**2)
 *         self.max_buffer_size = max_buffer_size             # <<<<<<<<<<<<<<
 *         self.read_size = read_size
 *         self.buf = <char*>PyMem_Malloc(read_size)
 */
  __pyx_v_self->max_buffer_size = __pyx_v_max_buffer_size;

  /* "srsly/msgpack/_unpacker.pyx":358
 *             read_size = min(max_buffer_size, 1024**2)
 *         self.max_buffer_size = max_buffer_size
 *         self.read_size = read_size             # <<<<<<<<<<<<<<
 *         self.buf = <char*>PyMem_Malloc(read_size)
 *         if self.buf == NULL:
 */
  __pyx_v_self->read_size = __pyx_v_read_size;

  /* "srsly/msgpack/_unpacker.pyx":359
 *         self.max_buffer_size = max_buffer_size
 *         self.read_size = read_size
 *         self.buf = <char*>PyMem_Malloc(read_size)             # <<<<<<<<<<<<<<
 *         if self.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 */
  __pyx_v_self->buf = ((char *)PyMem_Malloc(__pyx_v_read_size));

  /* "srsly/msgpack/_unpacker.pyx":360
 *         self.read_size = read_size
 *         self.buf = <char*>PyMem_Malloc(read_size)
 *         if self.buf == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.buf_size = read_size
 */
  __pyx_t_1 = ((__pyx_v_self->buf == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "srsly/msgpack/_unpacker.pyx":361
 *         self.buf = <char*>PyMem_Malloc(read_size)
 *         if self.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")             # <<<<<<<<<<<<<<
 *         self.buf_size = read_size
 *         self.buf_head = 0
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 361, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":360
 *         self.read_size = read_size
 *         self.buf = <char*>PyMem_Malloc(read_size)
 *         if self.buf == NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.buf_size = read_size
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":362
 *         if self.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.buf_size = read_size             # <<<<<<<<<<<<<<
 *         self.buf_head = 0
 *         self.buf_tail = 0
 */
  __pyx_v_self->buf_size = __pyx_v_read_size;

  /* "srsly/msgpack/_unpacker.pyx":363
 *             raise MemoryError("Unable to allocate internal buffer.")
 *         self.buf_size = read_size
 *         self.buf_head = 0             # <<<<<<<<<<<<<<
 *         self.buf_tail = 0
 *         self.stream_offset = 0
 */
  __pyx_v_self->buf_head = 0;

  /* "srsly/msgpack/_unpacker.pyx":364
 *         self.buf_size = read_size
 *         self.buf_head = 0
 *         self.buf_tail = 0             # <<<<<<<<<<<<<<
 *         self.stream_offset = 0
 * 
 */
  __pyx_v_self->buf_tail = 0;

  /* "srsly/msgpack/_unpacker.pyx":365
 *         self.buf_head = 0
 *         self.buf_tail = 0
 *         self.stream_offset = 0             # <<<<<<<<<<<<<<
 * 
 *         if encoding is not None:
 */
  __pyx_v_self->stream_offset = 0;

  /* "srsly/msgpack/_unpacker.pyx":367
 *         self.stream_offset = 0
 * 
 *         if encoding is not None:             # <<<<<<<<<<<<<<
 *             encoding = ensure_bytes(encoding)
 *             self.encoding = encoding
 */
  __pyx_t_1 = (__pyx_v_encoding != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "srsly/msgpack/_unpacker.pyx":368
 * 
 *         if encoding is not None:
 *             encoding = ensure_bytes(encoding)             # <<<<<<<<<<<<<<
 *             self.encoding = encoding
 *             cenc = encoding
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ensure_bytes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_encoding) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_encoding);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_encoding, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "srsly/msgpack/_unpacker.pyx":369
 *         if encoding is not None:
 *             encoding = ensure_bytes(encoding)
 *             self.encoding = encoding             # <<<<<<<<<<<<<<
 *             cenc = encoding
 * 
 */
    __Pyx_INCREF(__pyx_v_encoding);
    __Pyx_GIVEREF(__pyx_v_encoding);
    __Pyx_GOTREF(__pyx_v_self->encoding);
    __Pyx_DECREF(__pyx_v_self->encoding);
    __pyx_v_self->encoding = __pyx_v_encoding;

    /* "srsly/msgpack/_unpacker.pyx":370
 *             encoding = ensure_bytes(encoding)
 *             self.encoding = encoding
 *             cenc = encoding             # <<<<<<<<<<<<<<
 * 
 *         if unicode_errors is not None:
 */
    __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_encoding); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L1_error)
    __pyx_v_cenc = __pyx_t_9;

    /* "srsly/msgpack/_unpacker.pyx":367
 *         self.stream_offset = 0
 * 
 *         if encoding is not None:             # <<<<<<<<<<<<<<
 *             encoding = ensure_bytes(encoding)
 *             self.encoding = encoding
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":372
 *             cenc = encoding
 * 
 *         if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *             unicode_errors = ensure_bytes(unicode_errors)
 *             self.unicode_errors = unicode_errors
 */
  __pyx_t_6 = (__pyx_v_unicode_errors != Py_None);
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":373
 * 
 *         if unicode_errors is not None:
 *             unicode_errors = ensure_bytes(unicode_errors)             # <<<<<<<<<<<<<<
 *             self.unicode_errors = unicode_errors
 *             cerr = unicode_errors
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ensure_bytes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_2 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_v_unicode_errors) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_unicode_errors);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_unicode_errors, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "srsly/msgpack/_unpacker.pyx":374
 *         if unicode_errors is not None:
 *             unicode_errors = ensure_bytes(unicode_errors)
 *             self.unicode_errors = unicode_errors             # <<<<<<<<<<<<<<
 *             cerr = unicode_errors
 * 
 */
    __Pyx_INCREF(__pyx_v_unicode_errors);
    __Pyx_GIVEREF(__pyx_v_unicode_errors);
    __Pyx_GOTREF(__pyx_v_self->unicode_errors);
    __Pyx_DECREF(__pyx_v_self->unicode_errors);
    __pyx_v_self->unicode_errors = __pyx_v_unicode_errors;

    /* "srsly/msgpack/_unpacker.pyx":375
 *             unicode_errors = ensure_bytes(unicode_errors)
 *             self.unicode_errors = unicode_errors
 *             cerr = unicode_errors             # <<<<<<<<<<<<<<
 * 
 *         init_ctx(&self.ctx, object_hook, object_pairs_hook, list_hook,
 */
    __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_unicode_errors); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 375, __pyx_L1_error)
    __pyx_v_cerr = __pyx_t_10;

    /* "srsly/msgpack/_unpacker.pyx":372
 *             cenc = encoding
 * 
 *         if unicode_errors is not None:             # <<<<<<<<<<<<<<
 *             unicode_errors = ensure_bytes(unicode_errors)
 *             self.unicode_errors = unicode_errors
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":377
 *             cerr = unicode_errors
 * 
 *         init_ctx(&self.ctx, object_hook, object_pairs_hook, list_hook,             # <<<<<<<<<<<<<<
 *                  ext_hook, use_list, raw, strict_map_key, cenc, cerr,
 *                  max_str_len, max_bin_len, max_array_len,
 */
  __pyx_t_2 = __pyx_f_5srsly_7msgpack_9_unpacker_init_ctx((&__pyx_v_self->ctx), __pyx_v_object_hook, __pyx_v_object_pairs_hook, __pyx_v_list_hook, __pyx_v_ext_hook, __pyx_v_use_list, __pyx_v_raw, __pyx_v_strict_map_key, __pyx_v_cenc, __pyx_v_cerr, __pyx_v_max_str_len, __pyx_v_max_bin_len, __pyx_v_max_array_len, __pyx_v_max_map_len, __pyx_v_max_ext_len); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":328
 *         self.buf = NULL
 * 
 *     def __init__(self, file_like=None, Py_ssize_t read_size=0,             # <<<<<<<<<<<<<<
 *                  bint use_list=True, bint raw=True, bint strict_map_key=False,
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_encoding);
  __Pyx_XDECREF(__pyx_v_unicode_errors);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":382
 *                  max_map_len, max_ext_len)
 * 
 *     def feed(self, object next_bytes):             # <<<<<<<<<<<<<<
 *         """Append `next_bytes` to internal buffer."""
 *         cdef Py_buffer pybuff
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_7feed(PyObject *__pyx_v_self, PyObject *__pyx_v_next_bytes); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_6feed[] = "Unpacker.feed(self, next_bytes)\nAppend `next_bytes` to internal buffer.";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_7feed(PyObject *__pyx_v_self, PyObject *__pyx_v_next_bytes) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("feed (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_6feed(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self), ((PyObject *)__pyx_v_next_bytes));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_6feed(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, PyObject *__pyx_v_next_bytes) {
  Py_buffer __pyx_v_pybuff;
  int __pyx_v_new_protocol;
  char *__pyx_v_buf;
  Py_ssize_t __pyx_v_buf_len;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("feed", 0);

  /* "srsly/msgpack/_unpacker.pyx":385
 *         """Append `next_bytes` to internal buffer."""
 *         cdef Py_buffer pybuff
 *         cdef int new_protocol = 0             # <<<<<<<<<<<<<<
 *         cdef char* buf
 *         cdef Py_ssize_t buf_len
 */
  __pyx_v_new_protocol = 0;

  /* "srsly/msgpack/_unpacker.pyx":389
 *         cdef Py_ssize_t buf_len
 * 
 *         if self.file_like is not None:             # <<<<<<<<<<<<<<
 *             raise AssertionError(
 *                     "unpacker.feed() is not be able to use with `file_like`.")
 */
  __pyx_t_1 = (__pyx_v_self->file_like != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "srsly/msgpack/_unpacker.pyx":390
 * 
 *         if self.file_like is not None:
 *             raise AssertionError(             # <<<<<<<<<<<<<<
 *                     "unpacker.feed() is not be able to use with `file_like`.")
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_AssertionError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 390, __pyx_L1_error)

    /* "srsly/msgpack/_unpacker.pyx":389
 *         cdef Py_ssize_t buf_len
 * 
 *         if self.file_like is not None:             # <<<<<<<<<<<<<<
 *             raise AssertionError(
 *                     "unpacker.feed() is not be able to use with `file_like`.")
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":393
 *                     "unpacker.feed() is not be able to use with `file_like`.")
 * 
 *         get_data_from_buffer(next_bytes, &pybuff, &buf, &buf_len, &new_protocol)             # <<<<<<<<<<<<<<
 *         try:
 *             self.append_buffer(buf, buf_len)
 */
  __pyx_t_4 = __pyx_f_5srsly_7msgpack_9_unpacker_get_data_from_buffer(__pyx_v_next_bytes, (&__pyx_v_pybuff), (&__pyx_v_buf), (&__pyx_v_buf_len), (&__pyx_v_new_protocol)); if (unlikely(__pyx_t_4 == ((int)0))) __PYX_ERR(0, 393, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":394
 * 
 *         get_data_from_buffer(next_bytes, &pybuff, &buf, &buf_len, &new_protocol)
 *         try:             # <<<<<<<<<<<<<<
 *             self.append_buffer(buf, buf_len)
 *         finally:
 */
  /*try:*/ {

    /* "srsly/msgpack/_unpacker.pyx":395
 *         get_data_from_buffer(next_bytes, &pybuff, &buf, &buf_len, &new_protocol)
 *         try:
 *             self.append_buffer(buf, buf_len)             # <<<<<<<<<<<<<<
 *         finally:
 *             if new_protocol:
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->append_buffer(__pyx_v_self, __pyx_v_buf, __pyx_v_buf_len); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "srsly/msgpack/_unpacker.pyx":397
 *             self.append_buffer(buf, buf_len)
 *         finally:
 *             if new_protocol:             # <<<<<<<<<<<<<<
 *                 PyBuffer_Release(&pybuff)
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_t_2 = (__pyx_v_new_protocol != 0);
      if (__pyx_t_2) {

        /* "srsly/msgpack/_unpacker.pyx":398
 *         finally:
 *             if new_protocol:
 *                 PyBuffer_Release(&pybuff)             # <<<<<<<<<<<<<<
 * 
 *     cdef append_buffer(self, void* _buf, Py_ssize_t _buf_len):
 */
        PyBuffer_Release((&__pyx_v_pybuff));

        /* "srsly/msgpack/_unpacker.pyx":397
 *             self.append_buffer(buf, buf_len)
 *         finally:
 *             if new_protocol:             # <<<<<<<<<<<<<<
 *                 PyBuffer_Release(&pybuff)
 * 
 */
      }
      goto __pyx_L6;
    }
    __pyx_L5_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        __pyx_t_2 = (__pyx_v_new_protocol != 0);
        if (__pyx_t_2) {

          /* "srsly/msgpack/_unpacker.pyx":398
 *         finally:
 *             if new_protocol:
 *                 PyBuffer_Release(&pybuff)             # <<<<<<<<<<<<<<
 * 
 *     cdef append_buffer(self, void* _buf, Py_ssize_t _buf_len):
 */
          PyBuffer_Release((&__pyx_v_pybuff));

          /* "srsly/msgpack/_unpacker.pyx":397
 *             self.append_buffer(buf, buf_len)
 *         finally:
 *             if new_protocol:             # <<<<<<<<<<<<<<
 *                 PyBuffer_Release(&pybuff)
 * 
 */
        }
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L6:;
  }

  /* "srsly/msgpack/_unpacker.pyx":382
 *                  max_map_len, max_ext_len)
 * 
 *     def feed(self, object next_bytes):             # <<<<<<<<<<<<<<
 *         """Append `next_bytes` to internal buffer."""
 *         cdef Py_buffer pybuff
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.feed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":400
 *                 PyBuffer_Release(&pybuff)
 * 
 *     cdef append_buffer(self, void* _buf, Py_ssize_t _buf_len):             # <<<<<<<<<<<<<<
 *         cdef:
 *             char* buf = self.buf
 */

static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_append_buffer(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, void *__pyx_v__buf, Py_ssize_t __pyx_v__buf_len) {
  char *__pyx_v_buf;
  char *__pyx_v_new_buf;
  Py_ssize_t __pyx_v_head;
  Py_ssize_t __pyx_v_tail;
  Py_ssize_t __pyx_v_buf_size;
  Py_ssize_t __pyx_v_new_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("append_buffer", 0);

  /* "srsly/msgpack/_unpacker.pyx":402
 *     cdef append_buffer(self, void* _buf, Py_ssize_t _buf_len):
 *         cdef:
 *             char* buf = self.buf             # <<<<<<<<<<<<<<
 *             char* new_buf
 *             Py_ssize_t head = self.buf_head
 */
  __pyx_t_1 = __pyx_v_self->buf;
  __pyx_v_buf = __pyx_t_1;

  /* "srsly/msgpack/_unpacker.pyx":404
 *             char* buf = self.buf
 *             char* new_buf
 *             Py_ssize_t head = self.buf_head             # <<<<<<<<<<<<<<
 *             Py_ssize_t tail = self.buf_tail
 *             Py_ssize_t buf_size = self.buf_size
 */
  __pyx_t_2 = __pyx_v_self->buf_head;
  __pyx_v_head = __pyx_t_2;

  /* "srsly/msgpack/_unpacker.pyx":405
 *             char* new_buf
 *             Py_ssize_t head = self.buf_head
 *             Py_ssize_t tail = self.buf_tail             # <<<<<<<<<<<<<<
 *             Py_ssize_t buf_size = self.buf_size
 *             Py_ssize_t new_size
 */
  __pyx_t_2 = __pyx_v_self->buf_tail;
  __pyx_v_tail = __pyx_t_2;

  /* "srsly/msgpack/_unpacker.pyx":406
 *             Py_ssize_t head = self.buf_head
 *             Py_ssize_t tail = self.buf_tail
 *             Py_ssize_t buf_size = self.buf_size             # <<<<<<<<<<<<<<
 *             Py_ssize_t new_size
 * 
 */
  __pyx_t_2 = __pyx_v_self->buf_size;
  __pyx_v_buf_size = __pyx_t_2;

  /* "srsly/msgpack/_unpacker.pyx":409
 *             Py_ssize_t new_size
 * 
 *         if tail + _buf_len > buf_size:             # <<<<<<<<<<<<<<
 *             if ((tail - head) + _buf_len) <= buf_size:
 *                 # move to front.
 */
  __pyx_t_3 = (((__pyx_v_tail + __pyx_v__buf_len) > __pyx_v_buf_size) != 0);
  if (__pyx_t_3) {

    /* "srsly/msgpack/_unpacker.pyx":410
 * 
 *         if tail + _buf_len > buf_size:
 *             if ((tail - head) + _buf_len) <= buf_size:             # <<<<<<<<<<<<<<
 *                 # move to front.
 *                 memmove(buf, buf + head, tail - head)
 */
    __pyx_t_3 = ((((__pyx_v_tail - __pyx_v_head) + __pyx_v__buf_len) <= __pyx_v_buf_size) != 0);
    if (__pyx_t_3) {

      /* "srsly/msgpack/_unpacker.pyx":412
 *             if ((tail - head) + _buf_len) <= buf_size:
 *                 # move to front.
 *                 memmove(buf, buf + head, tail - head)             # <<<<<<<<<<<<<<
 *                 tail -= head
 *                 head = 0
 */
      (void)(memmove(__pyx_v_buf, (__pyx_v_buf + __pyx_v_head), (__pyx_v_tail - __pyx_v_head)));

      /* "srsly/msgpack/_unpacker.pyx":413
 *                 # move to front.
 *                 memmove(buf, buf + head, tail - head)
 *                 tail -= head             # <<<<<<<<<<<<<<
 *                 head = 0
 *             else:
 */
      __pyx_v_tail = (__pyx_v_tail - __pyx_v_head);

      /* "srsly/msgpack/_unpacker.pyx":414
 *                 memmove(buf, buf + head, tail - head)
 *                 tail -= head
 *                 head = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 # expand buffer.
 */
      __pyx_v_head = 0;

      /* "srsly/msgpack/_unpacker.pyx":410
 * 
 *         if tail + _buf_len > buf_size:
 *             if ((tail - head) + _buf_len) <= buf_size:             # <<<<<<<<<<<<<<
 *                 # move to front.
 *                 memmove(buf, buf + head, tail - head)
 */
      goto __pyx_L4;
    }

    /* "srsly/msgpack/_unpacker.pyx":417
 *             else:
 *                 # expand buffer.
 *                 new_size = (tail-head) + _buf_len             # <<<<<<<<<<<<<<
 *                 if new_size > self.max_buffer_size:
 *                     raise BufferFull
 */
    /*else*/ {
      __pyx_v_new_size = ((__pyx_v_tail - __pyx_v_head) + __pyx_v__buf_len);

      /* "srsly/msgpack/_unpacker.pyx":418
 *                 # expand buffer.
 *                 new_size = (tail-head) + _buf_len
 *                 if new_size > self.max_buffer_size:             # <<<<<<<<<<<<<<
 *                     raise BufferFull
 *                 new_size = min(new_size*2, self.max_buffer_size)
 */
      __pyx_t_3 = ((__pyx_v_new_size > __pyx_v_self->max_buffer_size) != 0);
      if (unlikely(__pyx_t_3)) {

        /* "srsly/msgpack/_unpacker.pyx":419
 *                 new_size = (tail-head) + _buf_len
 *                 if new_size > self.max_buffer_size:
 *                     raise BufferFull             # <<<<<<<<<<<<<<
 *                 new_size = min(new_size*2, self.max_buffer_size)
 *                 new_buf = <char*>PyMem_Malloc(new_size)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_BufferFull); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 419, __pyx_L1_error)

        /* "srsly/msgpack/_unpacker.pyx":418
 *                 # expand buffer.
 *                 new_size = (tail-head) + _buf_len
 *                 if new_size > self.max_buffer_size:             # <<<<<<<<<<<<<<
 *                     raise BufferFull
 *                 new_size = min(new_size*2, self.max_buffer_size)
 */
      }

      /* "srsly/msgpack/_unpacker.pyx":420
 *                 if new_size > self.max_buffer_size:
 *                     raise BufferFull
 *                 new_size = min(new_size*2, self.max_buffer_size)             # <<<<<<<<<<<<<<
 *                 new_buf = <char*>PyMem_Malloc(new_size)
 *                 if new_buf == NULL:
 */
      __pyx_t_2 = __pyx_v_self->max_buffer_size;
      __pyx_t_5 = (__pyx_v_new_size * 2);
      if (((__pyx_t_2 < __pyx_t_5) != 0)) {
        __pyx_t_6 = __pyx_t_2;
      } else {
        __pyx_t_6 = __pyx_t_5;
      }
      __pyx_v_new_size = __pyx_t_6;

      /* "srsly/msgpack/_unpacker.pyx":421
 *                     raise BufferFull
 *                 new_size = min(new_size*2, self.max_buffer_size)
 *                 new_buf = <char*>PyMem_Malloc(new_size)             # <<<<<<<<<<<<<<
 *                 if new_buf == NULL:
 *                     # self.buf still holds old buffer and will be freed during
 */
      __pyx_v_new_buf = ((char *)PyMem_Malloc(__pyx_v_new_size));

      /* "srsly/msgpack/_unpacker.pyx":422
 *                 new_size = min(new_size*2, self.max_buffer_size)
 *                 new_buf = <char*>PyMem_Malloc(new_size)
 *                 if new_buf == NULL:             # <<<<<<<<<<<<<<
 *                     # self.buf still holds old buffer and will be freed during
 *                     # obj destruction
 */
      __pyx_t_3 = ((__pyx_v_new_buf == NULL) != 0);
      if (unlikely(__pyx_t_3)) {

        /* "srsly/msgpack/_unpacker.pyx":425
 *                     # self.buf still holds old buffer and will be freed during
 *                     # obj destruction
 *                     raise MemoryError("Unable to enlarge internal buffer.")             # <<<<<<<<<<<<<<
 *                 memcpy(new_buf, buf + head, tail - head)
 *                 PyMem_Free(buf)
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 425, __pyx_L1_error)

        /* "srsly/msgpack/_unpacker.pyx":422
 *                 new_size = min(new_size*2, self.max_buffer_size)
 *                 new_buf = <char*>PyMem_Malloc(new_size)
 *                 if new_buf == NULL:             # <<<<<<<<<<<<<<
 *                     # self.buf still holds old buffer and will be freed during
 *                     # obj destruction
 */
      }

      /* "srsly/msgpack/_unpacker.pyx":426
 *                     # obj destruction
 *                     raise MemoryError("Unable to enlarge internal buffer.")
 *                 memcpy(new_buf, buf + head, tail - head)             # <<<<<<<<<<<<<<
 *                 PyMem_Free(buf)
 * 
 */
      (void)(memcpy(__pyx_v_new_buf, (__pyx_v_buf + __pyx_v_head), (__pyx_v_tail - __pyx_v_head)));

      /* "srsly/msgpack/_unpacker.pyx":427
 *                     raise MemoryError("Unable to enlarge internal buffer.")
 *                 memcpy(new_buf, buf + head, tail - head)
 *                 PyMem_Free(buf)             # <<<<<<<<<<<<<<
 * 
 *                 buf = new_buf
 */
      PyMem_Free(__pyx_v_buf);

      /* "srsly/msgpack/_unpacker.pyx":429
 *                 PyMem_Free(buf)
 * 
 *                 buf = new_buf             # <<<<<<<<<<<<<<
 *                 buf_size = new_size
 *                 tail -= head
 */
      __pyx_v_buf = __pyx_v_new_buf;

      /* "srsly/msgpack/_unpacker.pyx":430
 * 
 *                 buf = new_buf
 *                 buf_size = new_size             # <<<<<<<<<<<<<<
 *                 tail -= head
 *                 head = 0
 */
      __pyx_v_buf_size = __pyx_v_new_size;

      /* "srsly/msgpack/_unpacker.pyx":431
 *                 buf = new_buf
 *                 buf_size = new_size
 *                 tail -= head             # <<<<<<<<<<<<<<
 *                 head = 0
 * 
 */
      __pyx_v_tail = (__pyx_v_tail - __pyx_v_head);

      /* "srsly/msgpack/_unpacker.pyx":432
 *                 buf_size = new_size
 *                 tail -= head
 *                 head = 0             # <<<<<<<<<<<<<<
 * 
 *         memcpy(buf + tail, <char*>(_buf), _buf_len)
 */
      __pyx_v_head = 0;
    }
    __pyx_L4:;

    /* "srsly/msgpack/_unpacker.pyx":409
 *             Py_ssize_t new_size
 * 
 *         if tail + _buf_len > buf_size:             # <<<<<<<<<<<<<<
 *             if ((tail - head) + _buf_len) <= buf_size:
 *                 # move to front.
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":434
 *                 head = 0
 * 
 *         memcpy(buf + tail, <char*>(_buf), _buf_len)             # <<<<<<<<<<<<<<
 *         self.buf = buf
 *         self.buf_head = head
 */
  (void)(memcpy((__pyx_v_buf + __pyx_v_tail), ((char *)__pyx_v__buf), __pyx_v__buf_len));

  /* "srsly/msgpack/_unpacker.pyx":435
 * 
 *         memcpy(buf + tail, <char*>(_buf), _buf_len)
 *         self.buf = buf             # <<<<<<<<<<<<<<
 *         self.buf_head = head
 *         self.buf_size = buf_size
 */
  __pyx_v_self->buf = __pyx_v_buf;

  /* "srsly/msgpack/_unpacker.pyx":436
 *         memcpy(buf + tail, <char*>(_buf), _buf_len)
 *         self.buf = buf
 *         self.buf_head = head             # <<<<<<<<<<<<<<
 *         self.buf_size = buf_size
 *         self.buf_tail = tail + _buf_len
 */
  __pyx_v_self->buf_head = __pyx_v_head;

  /* "srsly/msgpack/_unpacker.pyx":437
 *         self.buf = buf
 *         self.buf_head = head
 *         self.buf_size = buf_size             # <<<<<<<<<<<<<<
 *         self.buf_tail = tail + _buf_len
 * 
 */
  __pyx_v_self->buf_size = __pyx_v_buf_size;

  /* "srsly/msgpack/_unpacker.pyx":438
 *         self.buf_head = head
 *         self.buf_size = buf_size
 *         self.buf_tail = tail + _buf_len             # <<<<<<<<<<<<<<
 * 
 *     cdef read_from_file(self):
 */
  __pyx_v_self->buf_tail = (__pyx_v_tail + __pyx_v__buf_len);

  /* "srsly/msgpack/_unpacker.pyx":400
 *                 PyBuffer_Release(&pybuff)
 * 
 *     cdef append_buffer(self, void* _buf, Py_ssize_t _buf_len):             # <<<<<<<<<<<<<<
 *         cdef:
 *             char* buf = self.buf
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.append_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":440
 *         self.buf_tail = tail + _buf_len
 * 
 *     cdef read_from_file(self):             # <<<<<<<<<<<<<<
 *         next_bytes = self.file_like_read(
 *                 min(self.read_size,
 */

static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_read_from_file(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_v_next_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_from_file", 0);

  /* "srsly/msgpack/_unpacker.pyx":443
 *         next_bytes = self.file_like_read(
 *                 min(self.read_size,
 *                     self.max_buffer_size - (self.buf_tail - self.buf_head)             # <<<<<<<<<<<<<<
 *                     ))
 *         if next_bytes:
 */
  __pyx_t_2 = (__pyx_v_self->max_buffer_size - (__pyx_v_self->buf_tail - __pyx_v_self->buf_head));

  /* "srsly/msgpack/_unpacker.pyx":442
 *     cdef read_from_file(self):
 *         next_bytes = self.file_like_read(
 *                 min(self.read_size,             # <<<<<<<<<<<<<<
 *                     self.max_buffer_size - (self.buf_tail - self.buf_head)
 *                     ))
 */
  __pyx_t_3 = __pyx_v_self->read_size;

  /* "srsly/msgpack/_unpacker.pyx":443
 *         next_bytes = self.file_like_read(
 *                 min(self.read_size,
 *                     self.max_buffer_size - (self.buf_tail - self.buf_head)             # <<<<<<<<<<<<<<
 *                     ))
 *         if next_bytes:
 */
  if (((__pyx_t_2 < __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->file_like_read);
  __pyx_t_6 = __pyx_v_self->file_like_read; __pyx_t_7 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_next_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "srsly/msgpack/_unpacker.pyx":445
 *                     self.max_buffer_size - (self.buf_tail - self.buf_head)
 *                     ))
 *         if next_bytes:             # <<<<<<<<<<<<<<
 *             self.append_buffer(PyBytes_AsString(next_bytes), PyBytes_Size(next_bytes))
 *         else:
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_next_bytes); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 445, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "srsly/msgpack/_unpacker.pyx":446
 *                     ))
 *         if next_bytes:
 *             self.append_buffer(PyBytes_AsString(next_bytes), PyBytes_Size(next_bytes))             # <<<<<<<<<<<<<<
 *         else:
 *             self.file_like = None
 */
    __pyx_t_9 = PyBytes_AsString(__pyx_v_next_bytes); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(0, 446, __pyx_L1_error)
    __pyx_t_4 = PyBytes_Size(__pyx_v_next_bytes); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1L))) __PYX_ERR(0, 446, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->append_buffer(__pyx_v_self, __pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "srsly/msgpack/_unpacker.pyx":445
 *                     self.max_buffer_size - (self.buf_tail - self.buf_head)
 *                     ))
 *         if next_bytes:             # <<<<<<<<<<<<<<
 *             self.append_buffer(PyBytes_AsString(next_bytes), PyBytes_Size(next_bytes))
 *         else:
 */
    goto __pyx_L3;
  }

  /* "srsly/msgpack/_unpacker.pyx":448
 *             self.append_buffer(PyBytes_AsString(next_bytes), PyBytes_Size(next_bytes))
 *         else:
 *             self.file_like = None             # <<<<<<<<<<<<<<
 * 
 *     cdef object _unpack(self, execute_fn execute, bint iter=0):
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->file_like);
    __Pyx_DECREF(__pyx_v_self->file_like);
    __pyx_v_self->file_like = Py_None;
  }
  __pyx_L3:;

  /* "srsly/msgpack/_unpacker.pyx":440
 *         self.buf_tail = tail + _buf_len
 * 
 *     cdef read_from_file(self):             # <<<<<<<<<<<<<<
 *         next_bytes = self.file_like_read(
 *                 min(self.read_size,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.read_from_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_next_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":450
 *             self.file_like = None
 * 
 *     cdef object _unpack(self, execute_fn execute, bint iter=0):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         cdef object obj
 */

static PyObject *__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker__unpack(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, execute_fn __pyx_v_execute, struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack *__pyx_optional_args) {
  int __pyx_v_iter = ((int)0);
  int __pyx_v_ret;
  PyObject *__pyx_v_obj = 0;
  Py_ssize_t __pyx_v_prev_head;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unpack", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_iter = __pyx_optional_args->iter;
    }
  }

  /* "srsly/msgpack/_unpacker.pyx":455
 *         cdef Py_ssize_t prev_head
 * 
 *         if self.buf_head >= self.buf_tail and self.file_like is not None:             # <<<<<<<<<<<<<<
 *             self.read_from_file()
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->buf_head >= __pyx_v_self->buf_tail) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->file_like != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "srsly/msgpack/_unpacker.pyx":456
 * 
 *         if self.buf_head >= self.buf_tail and self.file_like is not None:
 *             self.read_from_file()             # <<<<<<<<<<<<<<
 * 
 *         while 1:
 */
    __pyx_t_4 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->read_from_file(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "srsly/msgpack/_unpacker.pyx":455
 *         cdef Py_ssize_t prev_head
 * 
 *         if self.buf_head >= self.buf_tail and self.file_like is not None:             # <<<<<<<<<<<<<<
 *             self.read_from_file()
 * 
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":458
 *             self.read_from_file()
 * 
 *         while 1:             # <<<<<<<<<<<<<<
 *             prev_head = self.buf_head
 *             if prev_head >= self.buf_tail:
 */
  while (1) {

    /* "srsly/msgpack/_unpacker.pyx":459
 * 
 *         while 1:
 *             prev_head = self.buf_head             # <<<<<<<<<<<<<<
 *             if prev_head >= self.buf_tail:
 *                 if iter:
 */
    __pyx_t_5 = __pyx_v_self->buf_head;
    __pyx_v_prev_head = __pyx_t_5;

    /* "srsly/msgpack/_unpacker.pyx":460
 *         while 1:
 *             prev_head = self.buf_head
 *             if prev_head >= self.buf_tail:             # <<<<<<<<<<<<<<
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")
 */
    __pyx_t_1 = ((__pyx_v_prev_head >= __pyx_v_self->buf_tail) != 0);
    if (__pyx_t_1) {

      /* "srsly/msgpack/_unpacker.pyx":461
 *             prev_head = self.buf_head
 *             if prev_head >= self.buf_tail:
 *                 if iter:             # <<<<<<<<<<<<<<
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 */
      __pyx_t_1 = (__pyx_v_iter != 0);
      if (unlikely(__pyx_t_1)) {

        /* "srsly/msgpack/_unpacker.pyx":462
 *             if prev_head >= self.buf_tail:
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise OutOfData("No more data to unpack.")
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_StopIteration, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 462, __pyx_L1_error)

        /* "srsly/msgpack/_unpacker.pyx":461
 *             prev_head = self.buf_head
 *             if prev_head >= self.buf_tail:
 *                 if iter:             # <<<<<<<<<<<<<<
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 */
      }

      /* "srsly/msgpack/_unpacker.pyx":464
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 *                     raise OutOfData("No more data to unpack.")             # <<<<<<<<<<<<<<
 * 
 *             ret = execute(&self.ctx, self.buf, self.buf_tail, &self.buf_head)
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OutOfData); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_No_more_data_to_unpack) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_No_more_data_to_unpack);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 464, __pyx_L1_error)
      }

      /* "srsly/msgpack/_unpacker.pyx":460
 *         while 1:
 *             prev_head = self.buf_head
 *             if prev_head >= self.buf_tail:             # <<<<<<<<<<<<<<
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")
 */
    }

    /* "srsly/msgpack/_unpacker.pyx":466
 *                     raise OutOfData("No more data to unpack.")
 * 
 *             ret = execute(&self.ctx, self.buf, self.buf_tail, &self.buf_head)             # <<<<<<<<<<<<<<
 *             self.stream_offset += self.buf_head - prev_head
 * 
 */
    __pyx_t_8 = __pyx_v_execute((&__pyx_v_self->ctx), __pyx_v_self->buf, __pyx_v_self->buf_tail, (&__pyx_v_self->buf_head)); if (unlikely(__pyx_t_8 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
    __pyx_v_ret = __pyx_t_8;

    /* "srsly/msgpack/_unpacker.pyx":467
 * 
 *             ret = execute(&self.ctx, self.buf, self.buf_tail, &self.buf_head)
 *             self.stream_offset += self.buf_head - prev_head             # <<<<<<<<<<<<<<
 * 
 *             if ret == 1:
 */
    __pyx_v_self->stream_offset = (__pyx_v_self->stream_offset + (__pyx_v_self->buf_head - __pyx_v_prev_head));

    /* "srsly/msgpack/_unpacker.pyx":469
 *             self.stream_offset += self.buf_head - prev_head
 * 
 *             if ret == 1:             # <<<<<<<<<<<<<<
 *                 obj = unpack_data(&self.ctx)
 *                 unpack_init(&self.ctx)
 */
    switch (__pyx_v_ret) {
      case 1:

      /* "srsly/msgpack/_unpacker.pyx":470
 * 
 *             if ret == 1:
 *                 obj = unpack_data(&self.ctx)             # <<<<<<<<<<<<<<
 *                 unpack_init(&self.ctx)
 *                 return obj
 */
      __pyx_t_4 = unpack_data((&__pyx_v_self->ctx)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_v_obj = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "srsly/msgpack/_unpacker.pyx":471
 *             if ret == 1:
 *                 obj = unpack_data(&self.ctx)
 *                 unpack_init(&self.ctx)             # <<<<<<<<<<<<<<
 *                 return obj
 *             elif ret == 0:
 */
      unpack_init((&__pyx_v_self->ctx));

      /* "srsly/msgpack/_unpacker.pyx":472
 *                 obj = unpack_data(&self.ctx)
 *                 unpack_init(&self.ctx)
 *                 return obj             # <<<<<<<<<<<<<<
 *             elif ret == 0:
 *                 if self.file_like is not None:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_obj);
      __pyx_r = __pyx_v_obj;
      goto __pyx_L0;

      /* "srsly/msgpack/_unpacker.pyx":469
 *             self.stream_offset += self.buf_head - prev_head
 * 
 *             if ret == 1:             # <<<<<<<<<<<<<<
 *                 obj = unpack_data(&self.ctx)
 *                 unpack_init(&self.ctx)
 */
      break;
      case 0:

      /* "srsly/msgpack/_unpacker.pyx":474
 *                 return obj
 *             elif ret == 0:
 *                 if self.file_like is not None:             # <<<<<<<<<<<<<<
 *                     self.read_from_file()
 *                     continue
 */
      __pyx_t_1 = (__pyx_v_self->file_like != Py_None);
      __pyx_t_3 = (__pyx_t_1 != 0);
      if (__pyx_t_3) {

        /* "srsly/msgpack/_unpacker.pyx":475
 *             elif ret == 0:
 *                 if self.file_like is not None:
 *                     self.read_from_file()             # <<<<<<<<<<<<<<
 *                     continue
 *                 if iter:
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->read_from_file(__pyx_v_self); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "srsly/msgpack/_unpacker.pyx":476
 *                 if self.file_like is not None:
 *                     self.read_from_file()
 *                     continue             # <<<<<<<<<<<<<<
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")
 */
        goto __pyx_L6_continue;

        /* "srsly/msgpack/_unpacker.pyx":474
 *                 return obj
 *             elif ret == 0:
 *                 if self.file_like is not None:             # <<<<<<<<<<<<<<
 *                     self.read_from_file()
 *                     continue
 */
      }

      /* "srsly/msgpack/_unpacker.pyx":477
 *                     self.read_from_file()
 *                     continue
 *                 if iter:             # <<<<<<<<<<<<<<
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 */
      __pyx_t_3 = (__pyx_v_iter != 0);
      if (unlikely(__pyx_t_3)) {

        /* "srsly/msgpack/_unpacker.pyx":478
 *                     continue
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise OutOfData("No more data to unpack.")
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_StopIteration, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 478, __pyx_L1_error)

        /* "srsly/msgpack/_unpacker.pyx":477
 *                     self.read_from_file()
 *                     continue
 *                 if iter:             # <<<<<<<<<<<<<<
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 */
      }

      /* "srsly/msgpack/_unpacker.pyx":480
 *                     raise StopIteration("No more data to unpack.")
 *                 else:
 *                     raise OutOfData("No more data to unpack.")             # <<<<<<<<<<<<<<
 *             elif ret == -2:
 *                 raise FormatError
 */
      /*else*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OutOfData); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
          }
        }
        __pyx_t_4 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_kp_s_No_more_data_to_unpack) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_No_more_data_to_unpack);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(0, 480, __pyx_L1_error)
      }

      /* "srsly/msgpack/_unpacker.pyx":473
 *                 unpack_init(&self.ctx)
 *                 return obj
 *             elif ret == 0:             # <<<<<<<<<<<<<<
 *                 if self.file_like is not None:
 *                     self.read_from_file()
 */
      break;
      case -2L:

      /* "srsly/msgpack/_unpacker.pyx":482
 *                     raise OutOfData("No more data to unpack.")
 *             elif ret == -2:
 *                 raise FormatError             # <<<<<<<<<<<<<<
 *             elif ret == -3:
 *                 raise StackError
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_FormatError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 482, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":481
 *                 else:
 *                     raise OutOfData("No more data to unpack.")
 *             elif ret == -2:             # <<<<<<<<<<<<<<
 *                 raise FormatError
 *             elif ret == -3:
 */
      break;
      case -3L:

      /* "srsly/msgpack/_unpacker.pyx":484
 *                 raise FormatError
 *             elif ret == -3:
 *                 raise StackError             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("Unpack failed: error = %d" % (ret,))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_StackError); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 484, __pyx_L1_error)

      /* "srsly/msgpack/_unpacker.pyx":483
 *             elif ret == -2:
 *                 raise FormatError
 *             elif ret == -3:             # <<<<<<<<<<<<<<
 *                 raise StackError
 *             else:
 */
      break;
      default:

      /* "srsly/msgpack/_unpacker.pyx":486
 *                 raise StackError
 *             else:
 *                 raise ValueError("Unpack failed: error = %d" % (ret,))             # <<<<<<<<<<<<<<
 * 
 *     def read_bytes(self, Py_ssize_t nbytes):
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Unpack_failed_error_d, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 486, __pyx_L1_error)
      break;
    }
    __pyx_L6_continue:;
  }

  /* "srsly/msgpack/_unpacker.pyx":450
 *             self.file_like = None
 * 
 *     cdef object _unpack(self, execute_fn execute, bint iter=0):             # <<<<<<<<<<<<<<
 *         cdef int ret
 *         cdef object obj
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker._unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":488
 *                 raise ValueError("Unpack failed: error = %d" % (ret,))
 * 
 *     def read_bytes(self, Py_ssize_t nbytes):             # <<<<<<<<<<<<<<
 *         """Read a specified number of raw bytes from the stream"""
 *         cdef Py_ssize_t nread
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_9read_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_nbytes); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_8read_bytes[] = "Unpacker.read_bytes(self, Py_ssize_t nbytes)\nRead a specified number of raw bytes from the stream";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_9read_bytes(PyObject *__pyx_v_self, PyObject *__pyx_arg_nbytes) {
  Py_ssize_t __pyx_v_nbytes;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_bytes (wrapper)", 0);
  assert(__pyx_arg_nbytes); {
    __pyx_v_nbytes = __Pyx_PyIndex_AsSsize_t(__pyx_arg_nbytes); if (unlikely((__pyx_v_nbytes == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.read_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_8read_bytes(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self), ((Py_ssize_t)__pyx_v_nbytes));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_8read_bytes(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, Py_ssize_t __pyx_v_nbytes) {
  Py_ssize_t __pyx_v_nread;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_bytes", 0);

  /* "srsly/msgpack/_unpacker.pyx":491
 *         """Read a specified number of raw bytes from the stream"""
 *         cdef Py_ssize_t nread
 *         nread = min(self.buf_tail - self.buf_head, nbytes)             # <<<<<<<<<<<<<<
 *         ret = PyBytes_FromStringAndSize(self.buf + self.buf_head, nread)
 *         self.buf_head += nread
 */
  __pyx_t_1 = __pyx_v_nbytes;
  __pyx_t_2 = (__pyx_v_self->buf_tail - __pyx_v_self->buf_head);
  if (((__pyx_t_1 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_1;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_nread = __pyx_t_3;

  /* "srsly/msgpack/_unpacker.pyx":492
 *         cdef Py_ssize_t nread
 *         nread = min(self.buf_tail - self.buf_head, nbytes)
 *         ret = PyBytes_FromStringAndSize(self.buf + self.buf_head, nread)             # <<<<<<<<<<<<<<
 *         self.buf_head += nread
 *         if len(ret) < nbytes and self.file_like is not None:
 */
  __pyx_t_4 = PyBytes_FromStringAndSize((__pyx_v_self->buf + __pyx_v_self->buf_head), __pyx_v_nread); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_ret = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "srsly/msgpack/_unpacker.pyx":493
 *         nread = min(self.buf_tail - self.buf_head, nbytes)
 *         ret = PyBytes_FromStringAndSize(self.buf + self.buf_head, nread)
 *         self.buf_head += nread             # <<<<<<<<<<<<<<
 *         if len(ret) < nbytes and self.file_like is not None:
 *             ret += self.file_like.read(nbytes - len(ret))
 */
  __pyx_v_self->buf_head = (__pyx_v_self->buf_head + __pyx_v_nread);

  /* "srsly/msgpack/_unpacker.pyx":494
 *         ret = PyBytes_FromStringAndSize(self.buf + self.buf_head, nread)
 *         self.buf_head += nread
 *         if len(ret) < nbytes and self.file_like is not None:             # <<<<<<<<<<<<<<
 *             ret += self.file_like.read(nbytes - len(ret))
 *         return ret
 */
  __pyx_t_3 = PyObject_Length(__pyx_v_ret); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 494, __pyx_L1_error)
  __pyx_t_6 = ((__pyx_t_3 < __pyx_v_nbytes) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_self->file_like != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  __pyx_t_5 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_5) {

    /* "srsly/msgpack/_unpacker.pyx":495
 *         self.buf_head += nread
 *         if len(ret) < nbytes and self.file_like is not None:
 *             ret += self.file_like.read(nbytes - len(ret))             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->file_like, __pyx_n_s_read); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PyObject_Length(__pyx_v_ret); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 495, __pyx_L1_error)
    __pyx_t_9 = PyInt_FromSsize_t((__pyx_v_nbytes - __pyx_t_3)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_ret, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "srsly/msgpack/_unpacker.pyx":494
 *         ret = PyBytes_FromStringAndSize(self.buf + self.buf_head, nread)
 *         self.buf_head += nread
 *         if len(ret) < nbytes and self.file_like is not None:             # <<<<<<<<<<<<<<
 *             ret += self.file_like.read(nbytes - len(ret))
 *         return ret
 */
  }

  /* "srsly/msgpack/_unpacker.pyx":496
 *         if len(ret) < nbytes and self.file_like is not None:
 *             ret += self.file_like.read(nbytes - len(ret))
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def unpack(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":488
 *                 raise ValueError("Unpack failed: error = %d" % (ret,))
 * 
 *     def read_bytes(self, Py_ssize_t nbytes):             # <<<<<<<<<<<<<<
 *         """Read a specified number of raw bytes from the stream"""
 *         cdef Py_ssize_t nread
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.read_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":498
 *         return ret
 * 
 *     def unpack(self):             # <<<<<<<<<<<<<<
 *         """Unpack one object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_11unpack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_10unpack[] = "Unpacker.unpack(self)\nUnpack one object\n\n        Raises `OutOfData` when there are no more bytes to unpack.\n        ";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_11unpack(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unpack (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_10unpack(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_10unpack(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("unpack", 0);

  /* "srsly/msgpack/_unpacker.pyx":503
 *         Raises `OutOfData` when there are no more bytes to unpack.
 *         """
 *         return self._unpack(unpack_construct)             # <<<<<<<<<<<<<<
 * 
 *     def skip(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->_unpack(__pyx_v_self, unpack_construct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":498
 *         return ret
 * 
 *     def unpack(self):             # <<<<<<<<<<<<<<
 *         """Unpack one object
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.unpack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":505
 *         return self._unpack(unpack_construct)
 * 
 *     def skip(self):             # <<<<<<<<<<<<<<
 *         """Read and ignore one object, returning None
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_13skip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_12skip[] = "Unpacker.skip(self)\nRead and ignore one object, returning None\n\n        Raises `OutOfData` when there are no more bytes to unpack.\n        ";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_13skip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("skip (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_12skip(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_12skip(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("skip", 0);

  /* "srsly/msgpack/_unpacker.pyx":510
 *         Raises `OutOfData` when there are no more bytes to unpack.
 *         """
 *         return self._unpack(unpack_skip)             # <<<<<<<<<<<<<<
 * 
 *     def read_array_header(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->_unpack(__pyx_v_self, unpack_skip, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":505
 *         return self._unpack(unpack_construct)
 * 
 *     def skip(self):             # <<<<<<<<<<<<<<
 *         """Read and ignore one object, returning None
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.skip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":512
 *         return self._unpack(unpack_skip)
 * 
 *     def read_array_header(self):             # <<<<<<<<<<<<<<
 *         """assuming the next object is an array, return its size n, such that
 *         the next n unpack() calls will iterate over its contents.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_15read_array_header(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_14read_array_header[] = "Unpacker.read_array_header(self)\nassuming the next object is an array, return its size n, such that\n        the next n unpack() calls will iterate over its contents.\n\n        Raises `OutOfData` when there are no more bytes to unpack.\n        ";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_15read_array_header(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_array_header (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_14read_array_header(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_14read_array_header(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_array_header", 0);

  /* "srsly/msgpack/_unpacker.pyx":518
 *         Raises `OutOfData` when there are no more bytes to unpack.
 *         """
 *         return self._unpack(read_array_header)             # <<<<<<<<<<<<<<
 * 
 *     def read_map_header(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->_unpack(__pyx_v_self, read_array_header, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":512
 *         return self._unpack(unpack_skip)
 * 
 *     def read_array_header(self):             # <<<<<<<<<<<<<<
 *         """assuming the next object is an array, return its size n, such that
 *         the next n unpack() calls will iterate over its contents.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.read_array_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":520
 *         return self._unpack(read_array_header)
 * 
 *     def read_map_header(self):             # <<<<<<<<<<<<<<
 *         """assuming the next object is a map, return its size n, such that the
 *         next n * 2 unpack() calls will iterate over its key-value pairs.
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_17read_map_header(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_16read_map_header[] = "Unpacker.read_map_header(self)\nassuming the next object is a map, return its size n, such that the\n        next n * 2 unpack() calls will iterate over its key-value pairs.\n\n        Raises `OutOfData` when there are no more bytes to unpack.\n        ";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_17read_map_header(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_map_header (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_16read_map_header(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_16read_map_header(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read_map_header", 0);

  /* "srsly/msgpack/_unpacker.pyx":526
 *         Raises `OutOfData` when there are no more bytes to unpack.
 *         """
 *         return self._unpack(read_map_header)             # <<<<<<<<<<<<<<
 * 
 *     def tell(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->_unpack(__pyx_v_self, read_map_header, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":520
 *         return self._unpack(read_array_header)
 * 
 *     def read_map_header(self):             # <<<<<<<<<<<<<<
 *         """assuming the next object is a map, return its size n, such that the
 *         next n * 2 unpack() calls will iterate over its key-value pairs.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.read_map_header", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":528
 *         return self._unpack(read_map_header)
 * 
 *     def tell(self):             # <<<<<<<<<<<<<<
 *         return self.stream_offset
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_19tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_18tell[] = "Unpacker.tell(self)";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_19tell(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("tell (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_18tell(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_18tell(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("tell", 0);

  /* "srsly/msgpack/_unpacker.pyx":529
 * 
 *     def tell(self):
 *         return self.stream_offset             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_self->stream_offset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":528
 *         return self._unpack(read_map_header)
 * 
 *     def tell(self):             # <<<<<<<<<<<<<<
 *         return self.stream_offset
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.tell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":531
 *         return self.stream_offset
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_21__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_21__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_20__iter__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_20__iter__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "srsly/msgpack/_unpacker.pyx":532
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":531
 *         return self.stream_offset
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "srsly/msgpack/_unpacker.pyx":534
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self._unpack(unpack_construct, 1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_22__next__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_22__next__(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "srsly/msgpack/_unpacker.pyx":535
 * 
 *     def __next__(self):
 *         return self._unpack(unpack_construct, 1)             # <<<<<<<<<<<<<<
 * 
 *     # for debug.
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.iter = 1;
  __pyx_t_1 = ((struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self->__pyx_vtab)->_unpack(__pyx_v_self, unpack_construct, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "srsly/msgpack/_unpacker.pyx":534
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self._unpack(unpack_construct, 1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_24__reduce_cython__[] = "Unpacker.__reduce_cython__(self)";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_24__reduce_cython__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_26__setstate_cython__[] = "Unpacker.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_26__setstate_cython__(((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5srsly_7msgpack_9_unpacker_8Unpacker_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("srsly.msgpack._unpacker.Unpacker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_5srsly_7msgpack_9_unpacker_Unpacker __pyx_vtable_5srsly_7msgpack_9_unpacker_Unpacker;

static PyObject *__pyx_tp_new_5srsly_7msgpack_9_unpacker_Unpacker(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)o);
  p->__pyx_vtab = __pyx_vtabptr_5srsly_7msgpack_9_unpacker_Unpacker;
  p->file_like = Py_None; Py_INCREF(Py_None);
  p->file_like_read = Py_None; Py_INCREF(Py_None);
  p->object_hook = Py_None; Py_INCREF(Py_None);
  p->object_pairs_hook = Py_None; Py_INCREF(Py_None);
  p->list_hook = Py_None; Py_INCREF(Py_None);
  p->ext_hook = Py_None; Py_INCREF(Py_None);
  p->encoding = Py_None; Py_INCREF(Py_None);
  p->unicode_errors = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_5srsly_7msgpack_9_unpacker_Unpacker(PyObject *o) {
  struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *p = (struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->file_like);
  Py_CLEAR(p->file_like_read);
  Py_CLEAR(p->object_hook);
  Py_CLEAR(p->object_pairs_hook);
  Py_CLEAR(p->list_hook);
  Py_CLEAR(p->ext_hook);
  Py_CLEAR(p->encoding);
  Py_CLEAR(p->unicode_errors);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_5srsly_7msgpack_9_unpacker_Unpacker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *p = (struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)o;
  if (p->file_like) {
    e = (*v)(p->file_like, a); if (e) return e;
  }
  if (p->file_like_read) {
    e = (*v)(p->file_like_read, a); if (e) return e;
  }
  if (p->object_hook) {
    e = (*v)(p->object_hook, a); if (e) return e;
  }
  if (p->object_pairs_hook) {
    e = (*v)(p->object_pairs_hook, a); if (e) return e;
  }
  if (p->list_hook) {
    e = (*v)(p->list_hook, a); if (e) return e;
  }
  if (p->ext_hook) {
    e = (*v)(p->ext_hook, a); if (e) return e;
  }
  if (p->encoding) {
    e = (*v)(p->encoding, a); if (e) return e;
  }
  if (p->unicode_errors) {
    e = (*v)(p->unicode_errors, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5srsly_7msgpack_9_unpacker_Unpacker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *p = (struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *)o;
  tmp = ((PyObject*)p->file_like);
  p->file_like = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->file_like_read);
  p->file_like_read = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->object_hook);
  p->object_hook = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->object_pairs_hook);
  p->object_pairs_hook = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->list_hook);
  p->list_hook = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ext_hook);
  p->ext_hook = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->encoding);
  p->encoding = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->unicode_errors);
  p->unicode_errors = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {return __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__(self);}

static PyMethodDef __pyx_methods_5srsly_7msgpack_9_unpacker_Unpacker[] = {
  {"feed", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_7feed, METH_O, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_6feed},
  {"read_bytes", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_9read_bytes, METH_O, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_8read_bytes},
  {"unpack", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_11unpack, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_10unpack},
  {"skip", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_13skip, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_12skip},
  {"read_array_header", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_15read_array_header, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_14read_array_header},
  {"read_map_header", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_17read_map_header, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_16read_map_header},
  {"tell", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_19tell, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_18tell},
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_25__reduce_cython__, METH_NOARGS, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_24__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_27__setstate_cython__, METH_O, __pyx_doc_5srsly_7msgpack_9_unpacker_8Unpacker_26__setstate_cython__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5srsly_7msgpack_9_unpacker_Unpacker = {
  PyVarObject_HEAD_INIT(0, 0)
  "srsly.msgpack._unpacker.Unpacker", /*tp_name*/
  sizeof(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5srsly_7msgpack_9_unpacker_Unpacker, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Unpacker(file_like=None, Py_ssize_t read_size=0, bool use_list=True, bool raw=True, bool strict_map_key=False, object_hook=None, object_pairs_hook=None, list_hook=None, encoding=None, unicode_errors=None, Py_ssize_t max_buffer_size=0, ext_hook=ExtType, Py_ssize_t max_str_len=1048576, Py_ssize_t max_bin_len=1048576, Py_ssize_t max_array_len=131072, Py_ssize_t max_map_len=32768, Py_ssize_t max_ext_len=1048576)\nStreaming unpacker.\n\n    Arguments:\n\n    :param file_like:\n        File-like object having `.read(n)` method.\n        If specified, unpacker reads serialized data from it and :meth:`feed()` is not usable.\n\n    :param int read_size:\n        Used as `file_like.read(read_size)`. (default: `min(1024**2, max_buffer_size)`)\n\n    :param bool use_list:\n        If true, unpack msgpack array to Python list.\n        Otherwise, unpack to Python tuple. (default: True)\n\n    :param bool raw:\n        If true, unpack msgpack raw to Python bytes (default).\n        Otherwise, unpack to Python str (or unicode on Python 2) by decoding\n        with UTF-8 encoding (recommended).\n        Currently, the default is true, but it will be changed to false in\n        near future.  So you must specify it explicitly for keeping backward\n        compatibility.\n\n        *encoding* option which is deprecated overrides this option.\n\n    :param bool strict_map_key:\n        If true, only str or bytes are accepted for map (dict) keys.\n        It's False by default for backward-compatibility.\n        But it will be True from msgpack 1.0.\n\n    :param callable object_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a dict argument after unpacking msgpack map.\n        (See also simplejson)\n\n    :param callable object_pairs_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a list of key-value pairs after unpacking msgpack map.\n        (See also simplejson)\n\n    :param int max_buffer_size:\n       "" Limits size of data waiting unpacked.  0 means system's INT_MAX (default).\n        Raises `BufferFull` exception when it is insufficient.\n        You should set this parameter when unpacking data from untrusted source.\n\n    :param int max_str_len:\n        Limits max length of str. (default: 1024*1024)\n\n    :param int max_bin_len:\n        Limits max length of bin. (default: 1024*1024)\n\n    :param int max_array_len:\n        Limits max length of array. (default: 128*1024)\n\n    :param int max_map_len:\n        Limits max length of map. (default: 32*1024)\n\n    :param int max_ext_len:\n        Limits max length of map. (default: 1024*1024)\n\n    :param str encoding:\n        Deprecated, use raw instead.\n        Encoding used for decoding msgpack raw.\n        If it is None (default), msgpack raw is deserialized to Python bytes.\n\n    :param str unicode_errors:\n        Error handler used for decoding str type.  (default: `'strict'`)\n\n\n    Example of streaming deserialize from file-like object::\n\n        unpacker = Unpacker(file_like, raw=False)\n        for o in unpacker:\n            process(o)\n\n    Example of streaming deserialize from socket::\n\n        unpacker = Unpacker(raw=False)\n        while True:\n            buf = sock.recv(1024**2)\n            if not buf:\n                break\n            unpacker.feed(buf)\n            for o in unpacker:\n                process(o)\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``OutOfData`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n    ", /*tp_doc*/
  __pyx_tp_traverse_5srsly_7msgpack_9_unpacker_Unpacker, /*tp_traverse*/
  __pyx_tp_clear_5srsly_7msgpack_9_unpacker_Unpacker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_21__iter__, /*tp_iter*/
  __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_23__next__, /*tp_iternext*/
  __pyx_methods_5srsly_7msgpack_9_unpacker_Unpacker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5srsly_7msgpack_9_unpacker_8Unpacker_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5srsly_7msgpack_9_unpacker_Unpacker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__unpacker(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__unpacker},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_unpacker",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_BufferError, __pyx_k_BufferError, sizeof(__pyx_k_BufferError), 0, 0, 1, 1},
  {&__pyx_n_s_BufferFull, __pyx_k_BufferFull, sizeof(__pyx_k_BufferFull), 0, 0, 1, 1},
  {&__pyx_kp_s_Cannot_decode_extended_type_with, __pyx_k_Cannot_decode_extended_type_with, sizeof(__pyx_k_Cannot_decode_extended_type_with), 0, 0, 1, 0},
  {&__pyx_n_s_ExtType, __pyx_k_ExtType, sizeof(__pyx_k_ExtType), 0, 0, 1, 1},
  {&__pyx_n_s_ExtraData, __pyx_k_ExtraData, sizeof(__pyx_k_ExtraData), 0, 0, 1, 1},
  {&__pyx_n_s_FormatError, __pyx_k_FormatError, sizeof(__pyx_k_FormatError), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_No_more_data_to_unpack, __pyx_k_No_more_data_to_unpack, sizeof(__pyx_k_No_more_data_to_unpack), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OutOfData, __pyx_k_OutOfData, sizeof(__pyx_k_OutOfData), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeWarning, __pyx_k_RuntimeWarning, sizeof(__pyx_k_RuntimeWarning), 0, 0, 1, 1},
  {&__pyx_n_s_StackError, __pyx_k_StackError, sizeof(__pyx_k_StackError), 0, 0, 1, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_allocate_internal_buff, __pyx_k_Unable_to_allocate_internal_buff, sizeof(__pyx_k_Unable_to_allocate_internal_buff), 0, 0, 1, 0},
  {&__pyx_kp_s_Unable_to_enlarge_internal_buffe, __pyx_k_Unable_to_enlarge_internal_buffe, sizeof(__pyx_k_Unable_to_enlarge_internal_buffe), 0, 0, 1, 0},
  {&__pyx_kp_s_Unpack_failed_error_d, __pyx_k_Unpack_failed_error_d, sizeof(__pyx_k_Unpack_failed_error_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Unpack_failed_incomplete_input, __pyx_k_Unpack_failed_incomplete_input, sizeof(__pyx_k_Unpack_failed_incomplete_input), 0, 0, 1, 0},
  {&__pyx_n_s_Unpacker, __pyx_k_Unpacker, sizeof(__pyx_k_Unpacker), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_buf, __pyx_k_buf, sizeof(__pyx_k_buf), 0, 0, 1, 1},
  {&__pyx_n_s_buf_len, __pyx_k_buf_len, sizeof(__pyx_k_buf_len), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_unpack_from_multi_byte_ob, __pyx_k_cannot_unpack_from_multi_byte_ob, sizeof(__pyx_k_cannot_unpack_from_multi_byte_ob), 0, 0, 1, 0},
  {&__pyx_n_s_cenc, __pyx_k_cenc, sizeof(__pyx_k_cenc), 0, 0, 1, 1},
  {&__pyx_n_s_cerr, __pyx_k_cerr, sizeof(__pyx_k_cerr), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_s_could_not_get_memoryview, __pyx_k_could_not_get_memoryview, sizeof(__pyx_k_could_not_get_memoryview), 0, 0, 1, 0},
  {&__pyx_n_s_ctx, __pyx_k_ctx, sizeof(__pyx_k_ctx), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_default_read_extended_type, __pyx_k_default_read_extended_type, sizeof(__pyx_k_default_read_extended_type), 0, 0, 1, 1},
  {&__pyx_n_s_encoding, __pyx_k_encoding, sizeof(__pyx_k_encoding), 0, 0, 1, 1},
  {&__pyx_n_s_ensure_bytes, __pyx_k_ensure_bytes, sizeof(__pyx_k_ensure_bytes), 0, 0, 1, 1},
  {&__pyx_n_s_exceptions, __pyx_k_exceptions, sizeof(__pyx_k_exceptions), 0, 0, 1, 1},
  {&__pyx_n_s_ext_hook, __pyx_k_ext_hook, sizeof(__pyx_k_ext_hook), 0, 0, 1, 1},
  {&__pyx_kp_s_ext_hook_must_be_a_callable, __pyx_k_ext_hook_must_be_a_callable, sizeof(__pyx_k_ext_hook_must_be_a_callable), 0, 0, 1, 0},
  {&__pyx_n_s_ext_type, __pyx_k_ext_type, sizeof(__pyx_k_ext_type), 0, 0, 1, 1},
  {&__pyx_n_s_file_like, __pyx_k_file_like, sizeof(__pyx_k_file_like), 0, 0, 1, 1},
  {&__pyx_kp_s_file_like_read_must_be_a_callab, __pyx_k_file_like_read_must_be_a_callab, sizeof(__pyx_k_file_like_read_must_be_a_callab), 0, 0, 1, 0},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_list_hook, __pyx_k_list_hook, sizeof(__pyx_k_list_hook), 0, 0, 1, 1},
  {&__pyx_kp_s_list_hook_must_be_a_callable, __pyx_k_list_hook_must_be_a_callable, sizeof(__pyx_k_list_hook_must_be_a_callable), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_array_len, __pyx_k_max_array_len, sizeof(__pyx_k_max_array_len), 0, 0, 1, 1},
  {&__pyx_n_s_max_bin_len, __pyx_k_max_bin_len, sizeof(__pyx_k_max_bin_len), 0, 0, 1, 1},
  {&__pyx_n_s_max_buffer_size, __pyx_k_max_buffer_size, sizeof(__pyx_k_max_buffer_size), 0, 0, 1, 1},
  {&__pyx_n_s_max_ext_len, __pyx_k_max_ext_len, sizeof(__pyx_k_max_ext_len), 0, 0, 1, 1},
  {&__pyx_n_s_max_map_len, __pyx_k_max_map_len, sizeof(__pyx_k_max_map_len), 0, 0, 1, 1},
  {&__pyx_n_s_max_str_len, __pyx_k_max_str_len, sizeof(__pyx_k_max_str_len), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new_protocol, __pyx_k_new_protocol, sizeof(__pyx_k_new_protocol), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_object_hook, __pyx_k_object_hook, sizeof(__pyx_k_object_hook), 0, 0, 1, 1},
  {&__pyx_kp_s_object_hook_must_be_a_callable, __pyx_k_object_hook_must_be_a_callable, sizeof(__pyx_k_object_hook_must_be_a_callable), 0, 0, 1, 0},
  {&__pyx_n_s_object_pairs_hook, __pyx_k_object_pairs_hook, sizeof(__pyx_k_object_pairs_hook), 0, 0, 1, 1},
  {&__pyx_kp_s_object_pairs_hook_and_object_hoo, __pyx_k_object_pairs_hook_and_object_hoo, sizeof(__pyx_k_object_pairs_hook_and_object_hoo), 0, 0, 1, 0},
  {&__pyx_kp_s_object_pairs_hook_must_be_a_call, __pyx_k_object_pairs_hook_must_be_a_call, sizeof(__pyx_k_object_pairs_hook_must_be_a_call), 0, 0, 1, 0},
  {&__pyx_n_s_off, __pyx_k_off, sizeof(__pyx_k_off), 0, 0, 1, 1},
  {&__pyx_n_s_packed, __pyx_k_packed, sizeof(__pyx_k_packed), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
  {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
  {&__pyx_n_s_read_size, __pyx_k_read_size, sizeof(__pyx_k_read_size), 0, 0, 1, 1},
  {&__pyx_kp_s_read_size_should_be_less_or_equa, __pyx_k_read_size_should_be_less_or_equa, sizeof(__pyx_k_read_size_should_be_less_or_equa), 0, 0, 1, 0},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_srsly_msgpack__unpacker, __pyx_k_srsly_msgpack__unpacker, sizeof(__pyx_k_srsly_msgpack__unpacker), 0, 0, 1, 1},
  {&__pyx_kp_s_srsly_msgpack__unpacker_pyx, __pyx_k_srsly_msgpack__unpacker_pyx, sizeof(__pyx_k_srsly_msgpack__unpacker_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_stream, __pyx_k_stream, sizeof(__pyx_k_stream), 0, 0, 1, 1},
  {&__pyx_n_s_strict_map_key, __pyx_k_strict_map_key, sizeof(__pyx_k_strict_map_key), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_typecode, __pyx_k_typecode, sizeof(__pyx_k_typecode), 0, 0, 1, 1},
  {&__pyx_n_s_unicode_errors, __pyx_k_unicode_errors, sizeof(__pyx_k_unicode_errors), 0, 0, 1, 1},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_unpackb, __pyx_k_unpackb, sizeof(__pyx_k_unpackb), 0, 0, 1, 1},
  {&__pyx_kp_s_unpacker_feed_is_not_be_able_to, __pyx_k_unpacker_feed_is_not_be_able_to, sizeof(__pyx_k_unpacker_feed_is_not_be_able_to), 0, 0, 1, 0},
  {&__pyx_n_s_use_list, __pyx_k_use_list, sizeof(__pyx_k_use_list), 0, 0, 1, 1},
  {&__pyx_kp_s_using_old_buffer_interface_to_un, __pyx_k_using_old_buffer_interface_to_un, sizeof(__pyx_k_using_old_buffer_interface_to_un), 0, 0, 1, 0},
  {&__pyx_n_s_util, __pyx_k_util, sizeof(__pyx_k_util), 0, 0, 1, 1},
  {&__pyx_n_s_view, __pyx_k_view, sizeof(__pyx_k_view), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 78, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 107, __pyx_L1_error)
  __pyx_builtin_BufferError = __Pyx_GetBuiltinName(__pyx_n_s_BufferError); if (!__pyx_builtin_BufferError) __PYX_ERR(0, 122, __pyx_L1_error)
  __pyx_builtin_RuntimeWarning = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeWarning); if (!__pyx_builtin_RuntimeWarning) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 203, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 390, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 462, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "srsly/msgpack/_unpacker.pyx":78
 * 
 *     if object_hook is not None and object_pairs_hook is not None:
 *         raise TypeError("object_pairs_hook and object_hook are mutually exclusive.")             # <<<<<<<<<<<<<<
 * 
 *     if object_hook is not None:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_object_pairs_hook_and_object_hoo); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "srsly/msgpack/_unpacker.pyx":82
 *     if object_hook is not None:
 *         if not PyCallable_Check(object_hook):
 *             raise TypeError("object_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_hook
 * 
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_object_hook_must_be_a_callable); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "srsly/msgpack/_unpacker.pyx":89
 *     else:
 *         if not PyCallable_Check(object_pairs_hook):
 *             raise TypeError("object_pairs_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.object_hook = <PyObject*>object_pairs_hook
 *         ctx.user.has_pairs_hook = True
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_object_pairs_hook_must_be_a_call); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "srsly/msgpack/_unpacker.pyx":95
 *     if list_hook is not None:
 *         if not PyCallable_Check(list_hook):
 *             raise TypeError("list_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.list_hook = <PyObject*>list_hook
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_list_hook_must_be_a_callable); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "srsly/msgpack/_unpacker.pyx":100
 *     if ext_hook is not None:
 *         if not PyCallable_Check(ext_hook):
 *             raise TypeError("ext_hook must be a callable.")             # <<<<<<<<<<<<<<
 *         ctx.user.ext_hook = <PyObject*>ext_hook
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_ext_hook_must_be_a_callable); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "srsly/msgpack/_unpacker.pyx":122
 *         if view.itemsize != 1:
 *             PyBuffer_Release(view)
 *             raise BufferError("cannot unpack from multi-byte object")             # <<<<<<<<<<<<<<
 *         if PyBuffer_IsContiguous(view, b'A') == 0:
 *             PyBuffer_Release(view)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_cannot_unpack_from_multi_byte_ob); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "srsly/msgpack/_unpacker.pyx":137
 *         new_protocol[0] = 0
 *         if PyObject_AsReadBuffer(obj, <const void**> buf, buffer_len) == -1:
 *             raise BufferError("could not get memoryview")             # <<<<<<<<<<<<<<
 *         PyErr_WarnEx(RuntimeWarning,
 *                      "using old buffer interface to unpack %s; "
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_could_not_get_memoryview); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "srsly/msgpack/_unpacker.pyx":203
 *     unpack_clear(&ctx)
 *     if ret == 0:
 *         raise ValueError("Unpack failed: incomplete input")             # <<<<<<<<<<<<<<
 *     elif ret == -2:
 *         raise FormatError
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Unpack_failed_incomplete_input); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "srsly/msgpack/_unpacker.pyx":350
 *             self.file_like_read = file_like.read
 *             if not PyCallable_Check(self.file_like_read):
 *                 raise TypeError("`file_like.read` must be a callable.")             # <<<<<<<<<<<<<<
 *         if not max_buffer_size:
 *             max_buffer_size = INT_MAX
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_file_like_read_must_be_a_callab); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "srsly/msgpack/_unpacker.pyx":354
 *             max_buffer_size = INT_MAX
 *         if read_size > max_buffer_size:
 *             raise ValueError("read_size should be less or equal to max_buffer_size")             # <<<<<<<<<<<<<<
 *         if not read_size:
 *             read_size = min(max_buffer_size, 1024**2)
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_read_size_should_be_less_or_equa); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "srsly/msgpack/_unpacker.pyx":361
 *         self.buf = <char*>PyMem_Malloc(read_size)
 *         if self.buf == NULL:
 *             raise MemoryError("Unable to allocate internal buffer.")             # <<<<<<<<<<<<<<
 *         self.buf_size = read_size
 *         self.buf_head = 0
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_allocate_internal_buff); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "srsly/msgpack/_unpacker.pyx":390
 * 
 *         if self.file_like is not None:
 *             raise AssertionError(             # <<<<<<<<<<<<<<
 *                     "unpacker.feed() is not be able to use with `file_like`.")
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_unpacker_feed_is_not_be_able_to); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "srsly/msgpack/_unpacker.pyx":425
 *                     # self.buf still holds old buffer and will be freed during
 *                     # obj destruction
 *                     raise MemoryError("Unable to enlarge internal buffer.")             # <<<<<<<<<<<<<<
 *                 memcpy(new_buf, buf + head, tail - head)
 *                 PyMem_Free(buf)
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_enlarge_internal_buffe); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "srsly/msgpack/_unpacker.pyx":462
 *             if prev_head >= self.buf_tail:
 *                 if iter:
 *                     raise StopIteration("No more data to unpack.")             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise OutOfData("No more data to unpack.")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_No_more_data_to_unpack); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "srsly/msgpack/_unpacker.pyx":106
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(2, __pyx_n_s_typecode, __pyx_n_s_data); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srsly_msgpack__unpacker_pyx, __pyx_n_s_default_read_extended_type, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 106, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":147
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 */
  __pyx_tuple__26 = PyTuple_Pack(25, __pyx_n_s_packed, __pyx_n_s_object_hook, __pyx_n_s_list_hook, __pyx_n_s_use_list, __pyx_n_s_raw, __pyx_n_s_strict_map_key, __pyx_n_s_encoding, __pyx_n_s_unicode_errors, __pyx_n_s_object_pairs_hook, __pyx_n_s_ext_hook, __pyx_n_s_max_str_len, __pyx_n_s_max_bin_len, __pyx_n_s_max_array_len, __pyx_n_s_max_map_len, __pyx_n_s_max_ext_len, __pyx_n_s_ctx, __pyx_n_s_off, __pyx_n_s_ret, __pyx_n_s_view, __pyx_n_s_buf, __pyx_n_s_buf_len, __pyx_n_s_cenc, __pyx_n_s_cerr, __pyx_n_s_new_protocol, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(15, 0, 25, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srsly_msgpack__unpacker_pyx, __pyx_n_s_unpackb, 147, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 147, __pyx_L1_error)

  /* "srsly/msgpack/_unpacker.pyx":211
 * 
 * 
 * def unpack(object stream, **kwargs):             # <<<<<<<<<<<<<<
 *     data = stream.read()
 *     return unpackb(data, **kwargs)
 */
  __pyx_tuple__28 = PyTuple_Pack(3, __pyx_n_s_stream, __pyx_n_s_kwargs, __pyx_n_s_data); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_srsly_msgpack__unpacker_pyx, __pyx_n_s_unpack, 211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_5srsly_7msgpack_9_unpacker_Unpacker = &__pyx_vtable_5srsly_7msgpack_9_unpacker_Unpacker;
  __pyx_vtable_5srsly_7msgpack_9_unpacker_Unpacker.append_buffer = (PyObject *(*)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *, void *, Py_ssize_t))__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_append_buffer;
  __pyx_vtable_5srsly_7msgpack_9_unpacker_Unpacker.read_from_file = (PyObject *(*)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *))__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker_read_from_file;
  __pyx_vtable_5srsly_7msgpack_9_unpacker_Unpacker._unpack = (PyObject *(*)(struct __pyx_obj_5srsly_7msgpack_9_unpacker_Unpacker *, execute_fn, struct __pyx_opt_args_5srsly_7msgpack_9_unpacker_8Unpacker__unpack *__pyx_optional_args))__pyx_f_5srsly_7msgpack_9_unpacker_8Unpacker__unpack;
  if (PyType_Ready(&__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_5srsly_7msgpack_9_unpacker_Unpacker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker.tp_dictoffset && __pyx_type_5srsly_7msgpack_9_unpacker_Unpacker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_5srsly_7msgpack_9_unpacker_Unpacker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker.tp_dict, __pyx_vtabptr_5srsly_7msgpack_9_unpacker_Unpacker) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Unpacker, (PyObject *)&__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker) < 0) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_ptype_5srsly_7msgpack_9_unpacker_Unpacker = &__pyx_type_5srsly_7msgpack_9_unpacker_Unpacker;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_36(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_0_29_36(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyBoolObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(3, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_0_29_36(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyComplexObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_unpacker(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_unpacker(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__unpacker(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__unpacker(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__unpacker(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_unpacker' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__unpacker(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_unpacker", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_srsly__msgpack___unpacker) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "srsly.msgpack._unpacker")) {
      if (unlikely(PyDict_SetItemString(modules, "srsly.msgpack._unpacker", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "srsly/msgpack/_unpacker.pyx":16
 * 
 * from .exceptions import (
 *     BufferFull,             # <<<<<<<<<<<<<<
 *     OutOfData,
 *     ExtraData,
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BufferFull);
  __Pyx_GIVEREF(__pyx_n_s_BufferFull);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BufferFull);
  __Pyx_INCREF(__pyx_n_s_OutOfData);
  __Pyx_GIVEREF(__pyx_n_s_OutOfData);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_OutOfData);
  __Pyx_INCREF(__pyx_n_s_ExtraData);
  __Pyx_GIVEREF(__pyx_n_s_ExtraData);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_ExtraData);
  __Pyx_INCREF(__pyx_n_s_FormatError);
  __Pyx_GIVEREF(__pyx_n_s_FormatError);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_FormatError);
  __Pyx_INCREF(__pyx_n_s_StackError);
  __Pyx_GIVEREF(__pyx_n_s_StackError);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_StackError);

  /* "srsly/msgpack/_unpacker.pyx":15
 * ctypedef unsigned long long uint64_t
 * 
 * from .exceptions import (             # <<<<<<<<<<<<<<
 *     BufferFull,
 *     OutOfData,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_exceptions, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BufferFull); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BufferFull, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OutOfData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OutOfData, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ExtraData); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ExtraData, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_FormatError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FormatError, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_StackError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_StackError, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":22
 *     StackError,
 * )
 * from ._ext_type import ExtType             # <<<<<<<<<<<<<<
 * from .util import ensure_bytes
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ExtType);
  __Pyx_GIVEREF(__pyx_n_s_ExtType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ExtType);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_ext_type, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_ExtType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ExtType, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "srsly/msgpack/_unpacker.pyx":23
 * )
 * from ._ext_type import ExtType
 * from .util import ensure_bytes             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ensure_bytes);
  __Pyx_GIVEREF(__pyx_n_s_ensure_bytes);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ensure_bytes);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_util, __pyx_t_1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ensure_bytes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ensure_bytes, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":106
 *     ctx.user.unicode_errors = unicode_errors
 * 
 * def default_read_extended_type(typecode, data):             # <<<<<<<<<<<<<<
 *     raise NotImplementedError("Cannot decode extended type with typecode=%d" % typecode)
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5srsly_7msgpack_9_unpacker_1default_read_extended_type, NULL, __pyx_n_s_srsly_msgpack__unpacker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_default_read_extended_type, __pyx_t_2) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":145
 *         return 1
 * 
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1             # <<<<<<<<<<<<<<
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,
 */
  __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH = 0xFFFFFFFF;

  /* "srsly/msgpack/_unpacker.pyx":150
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_str_len=MAX_LENGTH,
 *             Py_ssize_t max_bin_len=MAX_LENGTH,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ExtType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__8 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":151
 *             encoding=None, unicode_errors=None,
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=MAX_LENGTH,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_bin_len=MAX_LENGTH,
 *             Py_ssize_t max_array_len=MAX_LENGTH,
 */
  __pyx_k__9 = __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;

  /* "srsly/msgpack/_unpacker.pyx":152
 *             object_pairs_hook=None, ext_hook=ExtType,
 *             Py_ssize_t max_str_len=MAX_LENGTH,
 *             Py_ssize_t max_bin_len=MAX_LENGTH,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_array_len=MAX_LENGTH,
 *             Py_ssize_t max_map_len=MAX_LENGTH,
 */
  __pyx_k__10 = __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;

  /* "srsly/msgpack/_unpacker.pyx":153
 *             Py_ssize_t max_str_len=MAX_LENGTH,
 *             Py_ssize_t max_bin_len=MAX_LENGTH,
 *             Py_ssize_t max_array_len=MAX_LENGTH,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_map_len=MAX_LENGTH,
 *             Py_ssize_t max_ext_len=MAX_LENGTH):
 */
  __pyx_k__11 = __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;

  /* "srsly/msgpack/_unpacker.pyx":154
 *             Py_ssize_t max_bin_len=MAX_LENGTH,
 *             Py_ssize_t max_array_len=MAX_LENGTH,
 *             Py_ssize_t max_map_len=MAX_LENGTH,             # <<<<<<<<<<<<<<
 *             Py_ssize_t max_ext_len=MAX_LENGTH):
 *     """
 */
  __pyx_k__12 = __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;

  /* "srsly/msgpack/_unpacker.pyx":155
 *             Py_ssize_t max_array_len=MAX_LENGTH,
 *             Py_ssize_t max_map_len=MAX_LENGTH,
 *             Py_ssize_t max_ext_len=MAX_LENGTH):             # <<<<<<<<<<<<<<
 *     """
 *     Unpack packed_bytes to object. Returns an unpacked object.
 */
  __pyx_k__13 = __pyx_v_5srsly_7msgpack_9_unpacker_MAX_LENGTH;

  /* "srsly/msgpack/_unpacker.pyx":147
 * cdef Py_ssize_t MAX_LENGTH = 2**32 -1
 * 
 * def unpackb(object packed, object object_hook=None, object list_hook=None,             # <<<<<<<<<<<<<<
 *             bint use_list=True, bint raw=True, bint strict_map_key=False,
 *             encoding=None, unicode_errors=None,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5srsly_7msgpack_9_unpacker_3unpackb, NULL, __pyx_n_s_srsly_msgpack__unpacker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unpackb, __pyx_t_2) < 0) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":211
 * 
 * 
 * def unpack(object stream, **kwargs):             # <<<<<<<<<<<<<<
 *     data = stream.read()
 *     return unpackb(data, **kwargs)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5srsly_7msgpack_9_unpacker_5unpack, NULL, __pyx_n_s_srsly_msgpack__unpacker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unpack, __pyx_t_2) < 0) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":332
 *                  object object_hook=None, object object_pairs_hook=None, object list_hook=None,
 *                  encoding=None, unicode_errors=None, Py_ssize_t max_buffer_size=0,
 *                  object ext_hook=ExtType,             # <<<<<<<<<<<<<<
 *                  Py_ssize_t max_str_len=1024*1024,
 *                  Py_ssize_t max_bin_len=1024*1024,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_ExtType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__15 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "srsly/msgpack/_unpacker.pyx":1
 * # coding: utf-8             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport *
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init srsly.msgpack._unpacker", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init srsly.msgpack._unpacker");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* ReRaiseException */
static CYTHON_INLINE void __Pyx_ReraiseException(void) {
    PyObject *type = NULL, *value = NULL, *tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = PyThreadState_GET();
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    type = exc_info->exc_type;
    value = exc_info->exc_value;
    tb = exc_info->exc_traceback;
    #else
    type = tstate->exc_type;
    value = tstate->exc_value;
    tb = tstate->exc_traceback;
    #endif
#else
    PyErr_GetExcInfo(&type, &value, &tb);
#endif
    if (!type || type == Py_None) {
#if !CYTHON_FAST_THREAD_STATE
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(tb);
#endif
        PyErr_SetString(PyExc_RuntimeError,
            "No active exception to reraise");
    } else {
#if CYTHON_FAST_THREAD_STATE
        Py_INCREF(type);
        Py_XINCREF(value);
        Py_XINCREF(tb);
#endif
        PyErr_Restore(type, value, tb);
    }
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_0_29_36
#define __PYX_HAVE_RT_ImportType_0_29_36
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_36 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_36 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
